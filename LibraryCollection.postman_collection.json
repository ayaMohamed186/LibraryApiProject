{
	"info": {
		"_postman_id": "0e626c5d-c368-4db7-9ca3-ce6d3f367ee1",
		"name": "LibraryCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10263534",
		"_collection_link": "https://universal-moon-632271.postman.co/workspace/LibraryWorkspace~a0bb3a98-c190-4ecf-aaae-1a083e2d8b87/collection/10263534-0e626c5d-c368-4db7-9ca3-ce6d3f367ee1?action=share&source=collection_link&creator=10263534"
	},
	"item": [
		{
			"name": "1- Books",
			"item": [
				{
					"name": "1.1 Create Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"pm.test(\"[1.1] TC01 validate that Status code for create book request is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 validate that response time for create book request less than 1000ms\" , function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC03 validate create book response scheme as expected\", function () {\r",
									"    var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"author\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"isbn\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"releaseDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"createdAt\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"updatedAt\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"title\",\r",
									"    \"author\",\r",
									"    \"isbn\",\r",
									"    \"releaseDate\",\r",
									"    \"createdAt\",\r",
									"    \"updatedAt\",\r",
									"    \"id\"\r",
									"  ]\r",
									"};\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"//validate data to be as expected\r",
									"pm.test(\"[1.1] TC04 validate that new book title in create book response is as expected\", function () {\r",
									"    pm.expect(responseBody.title).to.equal(requestBody.title);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC05 validate that new book author in create book response is as expected\", function () {\r",
									"    pm.expect(responseBody.author).to.equal(requestBody.author);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC06 validate that new book isbn in create book response is as expected\", function () {\r",
									"    pm.expect(responseBody.isbn).to.equal(requestBody.isbn);\r",
									"}); \r",
									"\r",
									"pm.test(\"[1.1] TC07 validate that new book releaseDate in create book response is as expected\", function () {\r",
									"    pm.expect(responseBody.releaseDate).to.equal(requestBody.releaseDate);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC08 validate that id is generated in the response not null and undefined\", function () {\r",
									"    pm.expect(responseBody.id).to.not.be.null;\r",
									"    pm.expect(responseBody.id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC09 validate that title is generated in the response not null and undefined\", function () {\r",
									"    pm.expect(responseBody.title).to.not.be.null;\r",
									"    pm.expect(responseBody.title).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC10 validate that author is generated in the response not null and undefined\", function () {\r",
									"    pm.expect(responseBody.author).to.not.be.null;\r",
									"    pm.expect(responseBody.author).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC11 validate that isbn is generated in the response not null and undefined\", function () {\r",
									"    pm.expect(responseBody.isbn).to.not.be.null;\r",
									"    pm.expect(responseBody.isbn).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC12 validate that releaseDate is in valid date format\", function () {\r",
									"    pm.expect(responseBody.releaseDate).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC13 validate that createdAt is in valid date format\", function () {\r",
									"    pm.expect(responseBody.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"    });\r",
									"\r",
									"pm.test(\"[1.1] TC14 validate that updatedAt is in valid date format\", function () {\r",
									"        pm.expect(responseBody.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"title\", responseBody.title);\r",
									"pm.collectionVariables.set(\"author\", responseBody.author);\r",
									"pm.collectionVariables.set(\"isbn\", responseBody.isbn);\r",
									"pm.collectionVariables.set(\"releaseDate\", responseBody.releaseDate);\r",
									"pm.collectionVariables.set(\"createdAt\", responseBody.createdAt);\r",
									"pm.collectionVariables.set(\"updatedAt\", responseBody.updatedAt);\r",
									"pm.collectionVariables.set(\"bookIdCreated\", responseBody.id);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomBookName() {\r",
									"  const adjectives = [\"Mystic\", \"Silent\", \"Hidden\", \"Fateful\", \"Endless\", \"Eternal\", \"Lonely\", \"Wandering\", \"Forgotten\"];\r",
									"  const nouns = [\"Journey\", \"Dream\", \"World\", \"Legacy\", \"Whisper\", \"Revenge\", \"Courage\", \"Heart\", \"Kingdom\"];\r",
									"\r",
									"  const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];\r",
									"  const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];\r",
									"\r",
									"  return `${randomAdjective} ${randomNoun}`;\r",
									"}\r",
									"\r",
									"var randomBookName = generateRandomBookName();\r",
									"pm.collectionVariables.set(\"randomBookName\",randomBookName);\r",
									"\r",
									"////////////////////////////////////////////////\r",
									"\r",
									"\r",
									"function generateRandomAuthorName() {\r",
									"  const firstNames = [\"James\", \"Sarah\", \"Michael\", \"Emily\", \"David\", \"Laura\", \"John\", \"Rebecca\", \"William\", \"Olivia\"];\r",
									"  const lastNames = [\"Smith\", \"Johnson\", \"Brown\", \"Davis\", \"Miller\", \"Wilson\", \"Moore\", \"Taylor\", \"Anderson\", \"Thomas\"];\r",
									"\r",
									"  const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"  const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"\r",
									"  return `${randomFirstName} ${randomLastName}`;\r",
									"}\r",
									"\r",
									"var randomAuthorName = generateRandomAuthorName();\r",
									"pm.collectionVariables.set(\"randomAuthorName\",randomAuthorName);\r",
									"\r",
									"//////////////////////////////////////////////////////////////////\r",
									"function generateRandomISBN() {\r",
									"  const prefix = \"978\"; // ISBN-13 prefix\r",
									"  let isbn = prefix;\r",
									"\r",
									"  // Generate the next 9 digits randomly\r",
									"  for (let i = 0; i < 9; i++) {\r",
									"    isbn += Math.floor(Math.random() * 10); // Random digit between 0 and 9\r",
									"  }\r",
									"  let sum = 0;\r",
									"  for (let i = 0; i < 12; i++) {\r",
									"    const digit = parseInt(isbn[i]);\r",
									"    sum += (i % 2 === 0) ? digit : digit * 3; // Alternate between multiplying by 1 and 3\r",
									"  }\r",
									"  const checkDigit = (10 - (sum % 10)) % 10; // ISBN-13 check digit formula\r",
									"  isbn += checkDigit;\r",
									"  return isbn;\r",
									"}\r",
									"\r",
									"var randomIBSN = generateRandomISBN();\r",
									"pm.collectionVariables.set(\"randomIBSN\",randomIBSN);\r",
									"\r",
									"//////////////////////////\r",
									"\r",
									"function generateRandomDate() {\r",
									"  // Set the start and end date range\r",
									"  const startDate = new Date('2000-01-01T00:00:00.000Z');\r",
									"  const endDate = new Date('2024-01-01T00:00:00.000Z');\r",
									"\r",
									"  // Generate a random timestamp between the start and end date\r",
									"  const randomTimestamp = startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime());\r",
									"\r",
									"  // Create a new Date object using the random timestamp\r",
									"  const randomDate = new Date(randomTimestamp);\r",
									"\r",
									"  // Format the date to match the desired format (YYYY-MM-DDTHH:mm:ss.sssZ)\r",
									"  return randomDate.toISOString();\r",
									"}\r",
									"var randomReleaseDate = generateRandomDate();\r",
									"pm.collectionVariables.set(\"randomReleaseDate\",randomReleaseDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{randomBookName}}\",\r\n    \"author\": \"{{randomAuthorName}}\",\r\n    \"isbn\": \"{{randomIBSN}}\",\r\n    \"releaseDate\": \"{{randomReleaseDate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/books",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"books"
							]
						},
						"description": "### Create a New Book\n\nThis endpoint allows you to create a new book by providing the title, author, ISBN, and release date in the request body.\n\n#### Request Body\n\n- `title` (string, required): The title of the book.\n    \n- `author` (string, required): The author of the book.\n    \n- `isbn` (string, required): The ISBN of the book.\n    \n- `releaseDate` (string, required): The release date of the book.\n    \n\nExample:\n\n``` json\n{\n  \"title\": \"Sample Title\",\n  \"author\": \"Sample Author\",\n  \"isbn\": \"1234567890\",\n  \"releaseDate\": \"2022-01-01\"\n}\n\n ```\n\n#### Response\n\n- `title` (string): The title of the created book.\n    \n- `author` (string): The author of the created book.\n    \n- `isbn` (string): The ISBN of the created book.\n    \n- `releaseDate` (string): The release date of the created book.\n    \n- `createdAt` (string): The timestamp of when the book was created.\n    \n- `updatedAt` (string): The timestamp of when the book was last updated.\n    \n- `id` (integer): The unique identifier of the created book.\n    \n\nExample Response:\n\n``` json\n{\n  \"title\": \"Sample Title\",\n  \"author\": \"Sample Author\",\n  \"isbn\": \"1234567890\",\n  \"releaseDate\": \"2022-01-01\",\n  \"createdAt\": \"2022-01-01T12:00:00Z\",\n  \"updatedAt\": \"2022-01-01T12:00:00Z\",\n  \"id\": 1\n}\n\n ```"
					},
					"response": [
						{
							"name": "1.1 Create Book",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{randomBookName}}\",\r\n    \"author\": \"{{randomAuthorName}}\",\r\n    \"isbn\": \"{{randomIBSN}}\",\r\n    \"releaseDate\": \"{{randomReleaseDate}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/books",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"books"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "229"
								},
								{
									"key": "ETag",
									"value": "W/\"e5-UPyG8WHPZgPgt3WnUqCXRF0QMoY\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 14:07:45 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"Hidden Courage\",\n    \"author\": \"Emily Taylor\",\n    \"isbn\": \"9783624317259\",\n    \"releaseDate\": \"2016-07-11T04:53:32.862Z\",\n    \"createdAt\": \"2025-05-05T14:07:45.896Z\",\n    \"updatedAt\": \"2025-05-05T14:07:45.896Z\",\n    \"id\": 54\n}"
						}
					]
				},
				{
					"name": "1.2 GetBookById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"[1.2] TC01 vaidate that status code for get book by id is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.2] TC02 validate that response time for get book id is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.2] TC03 validate that book id in response matches the same in creating request \", function () {\r",
									"    pm.expect(responseBody.id).to.eql(pm.collectionVariables.get(\"bookIdCreated\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[1.2] TC04 validate that book title in response matches the same in creating request \", function () {\r",
									"    pm.expect(responseBody.title).to.eql(pm.collectionVariables.get(\"title\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[1.2] TC05 validate that book author in response matches the same in creating request \", function () {\r",
									"    pm.expect(responseBody.author).to.eql(pm.collectionVariables.get(\"author\") );\r",
									"    });\r",
									"\r",
									"pm.test(\"[1.2] TC06 validate that book isbn in response matches the same in creating request \", function () {\r",
									"    pm.expect(responseBody.isbn).to.eql(pm.collectionVariables.get(\"isbn\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[1.2] TC07 validate that book release date in response matches the same in creating request \", function () {\r",
									"        pm.expect(responseBody.releaseDate).to.eql(pm.collectionVariables.get(\"releaseDate\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[1.2] TC08 validate that book created at in response matches the same in creating request \", function () {\r",
									"    pm.expect(responseBody.createdAt).to.eql(pm.collectionVariables.get(\"createdAt\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[1.2] TC09 validate that book updated at in response matches the same in creating request \", function () {\r",
									"    pm.expect(responseBody.updatedAt).to.eql(pm.collectionVariables.get(\"updatedAt\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[1.2] TC10 validate that title is not null, undefined or empty in get book request \", function () {\r",
									"    pm.expect(responseBody.title).to.not.be.null;\r",
									"    pm.expect(responseBody.title).to.not.be.undefined;\r",
									"    pm.expect(responseBody.title).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.2] TC11 validate that author is not null, undefined or empty in get book request\", function () {\r",
									"    pm.expect(responseBody.author).to.not.be.null;\r",
									"    pm.expect(responseBody.author).to.not.be.undefined;\r",
									"    pm.expect(responseBody.author).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.2] TC12 validate that isbn is not null, undefined or empty in get book request\", function () {\r",
									"    pm.expect(responseBody.isbn).to.not.be.null;\r",
									"    pm.expect(responseBody.isbn).to.not.be.undefined;\r",
									"    pm.expect(responseBody.isbn).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.2] TC13 validate that release date is not null, undefined or empty in get book request\", function () {\r",
									"    pm.expect(responseBody.releaseDate).to.not.be.null;\r",
									"    pm.expect(responseBody.releaseDate).to.not.be.undefined;\r",
									"    pm.expect(responseBody.releaseDate).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.2] TC14 validate that created at is not null, undefined or empty in get book request\", function () {\r",
									"    pm.expect(responseBody.createdAt).to.not.be.null;\r",
									"    pm.expect(responseBody.createdAt).to.not.be.undefined;\r",
									"    pm.expect(responseBody.createdAt).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.2] TC15 validate that updated at is not null, undefined or empty in get book request\", function () {\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.null;\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.undefined;\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.2] TC16 validate that id is not null, undefined or empty in get book request\", function () {\r",
									"    pm.expect(responseBody.id).to.not.be.null;\r",
									"    pm.expect(responseBody.id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/books/{{bookIdCreated}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"books",
								"{{bookIdCreated}}"
							]
						},
						"description": "This endpoint retrieves the details of a specific book identified by the `bookIdCreated`. The request does not require a request body. The response will include the details of the book such as `title`, `author`, `isbn`, `releaseDate`, `createdAt`, `updatedAt`, and `id`. The values for these attributes will be populated based on the specific book identified by the `bookIdCreated`."
					},
					"response": [
						{
							"name": "1.2 GetBookById",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/books/{{bookIdCreated}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"books",
										"{{bookIdCreated}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "227"
								},
								{
									"key": "ETag",
									"value": "W/\"e3-QiBVZaYVwTgcYC7x5WmWxtKzU3c\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 14:30:56 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"Lonely World\",\n    \"author\": \"Olivia Brown\",\n    \"isbn\": \"9783593201702\",\n    \"releaseDate\": \"2018-01-25T19:32:34.642Z\",\n    \"createdAt\": \"2025-05-05T14:27:16.149Z\",\n    \"updatedAt\": \"2025-05-05T14:27:16.149Z\",\n    \"id\": 63\n}"
						}
					]
				},
				{
					"name": "1.3 RetrieveAllBooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"[1.3] TC01 vaidate that status code for get all books request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.3] TC02 validate that response time for get all books request is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.3] TC03 validate that Response for get all books request is an array\", function () {\r",
									"    pm.expect(responseBody).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"[1.3] TC04 validate that Response for get all books request is not empty\", function () {\r",
									"    pm.expect(responseBody).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"// validate that first two object have schema as expected\r",
									"responseBody.slice(0, 2).forEach((item, index) => {\r",
									"    pm.test(`[1.3] TC05 validate that Item ${index} in response has id as number`, function () {\r",
									"        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
									"        pm.expect(item).to.not.be.undefined;\r",
									"    });\r",
									"\r",
									"    pm.test(`[1.3] TC06 validate that Item ${index} in response has title as string`, function () {\r",
									"        pm.expect(item).to.have.property(\"title\").that.is.a(\"string\");\r",
									"    });\r",
									"\r",
									"    pm.test(`[1.3] TC07 validate that Item ${index} in response has author as string`, function () {\r",
									"        pm.expect(item).to.have.property(\"author\").that.is.a(\"string\");\r",
									"    });\r",
									"\r",
									"    pm.test(`[1.3] TC08 validate that Item ${index} in response has publicationDate as string `, function () {\r",
									"        pm.expect(item).to.have.property(\"publicationDate\").that.is.a(\"string\");\r",
									"    });\r",
									"\r",
									"    pm.test(`[1.3] TC09 validate that Item ${index} in response has isbn as string `, function () {\r",
									"        pm.expect(item).to.have.property(\"publicationDate\").that.is.a(\"string\");\r",
									"    });\r",
									"\r",
									"    pm.test(`[1.3] TC10 validate that Item ${index} in response has createdAt as string `, function () {\r",
									"        pm.expect(item).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
									"    });\r",
									"\r",
									"       pm.test(`[1.3] TC11 validate that Item ${index} in response has updatedAt as string `, function () {\r",
									"        pm.expect(item).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/books",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"books"
							]
						},
						"description": "# Get Books\n\nThis endpoint retrieves a list of books.\n\n## Request\n\n- Method: GET\n    \n- URL: `{{baseURL}}/books`\n    \n\n## Response\n\nThe response will include an array of objects, each representing a book with the following properties:\n\n- `id` (number): The unique identifier for the book.\n    \n- `title` (string): The title of the book.\n    \n- `author` (string): The author of the book.\n    \n- `publicationDate` (string): The publication date of the book.\n    \n- `isbn` (string): The ISBN of the book.\n    \n- `createdAt` (string): The timestamp when the book record was created.\n    \n- `updatedAt` (string): The timestamp when the book record was last updated.\n    \n\nExample response:\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"title\": \"\",\n        \"author\": \"\",\n        \"publicationDate\": \"\",\n        \"isbn\": \"\",\n        \"createdAt\": \"\",\n        \"updatedAt\": \"\"\n    }\n]\n\n ```"
					},
					"response": [
						{
							"name": "1.3 RetrieveAllBooks",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/books",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"books"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"4522-ZW+L8as4Nm8qZt/nLv3y5LAEUao\""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 14:36:48 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"title\": \"Don't Waste Your Life\",\n        \"author\": \"John Piper\",\n        \"publicationDate\": \"2003-04-16T00:00:00.000Z\",\n        \"isbn\": \"1593281056\",\n        \"createdAt\": \"2020-03-27T00:00:00.000Z\",\n        \"updatedAt\": \"2020-03-27T00:00:00.000Z\"\n    },\n    {\n        \"id\": 2,\n        \"title\": \"Van Til's Apologetic\",\n        \"author\": \"Greg Bahnsen\",\n        \"publicationDate\": \"1998-06-01T00:00:00.000Z\",\n        \"isbn\": \"0875520987\",\n        \"createdAt\": \"2020-03-27T00:00:00.000Z\",\n        \"updatedAt\": \"2020-03-27T00:00:00.000Z\"\n    },\n    {\n        \"id\": 3,\n        \"title\": \"Lectures to My Students\",\n        \"author\": \"Charles Spurgeon\",\n        \"publicationDate\": \"2010-04-15T00:00:00.000Z\",\n        \"isbn\": \"1598565176\",\n        \"createdAt\": \"2020-03-27T00:00:00.000Z\",\n        \"updatedAt\": \"2020-03-27T00:00:00.000Z\"\n    },\n    {\n        \"id\": 4,\n        \"title\": \"The Screwtape Letters\",\n        \"author\": \"C. S. Lewis\",\n        \"publicationDate\": \"2015-03-21T00:00:00.000Z\",\n        \"isbn\": \"0060652934\",\n        \"createdAt\": \"2020-03-27T00:00:00.000Z\",\n        \"updatedAt\": \"2020-03-27T00:00:00.000Z\"\n    },\n    {\n        \"title\": \"You Are What You Love: The Spiritual Power of Habit\",\n        \"author\": \"James K.A. Smith\",\n        \"isbn\": \"158743380X\",\n        \"releaseDate\": \"2016-03-05\",\n        \"createdAt\": \"2021-06-22T22:15:41.821Z\",\n        \"updatedAt\": \"2021-06-22T22:15:41.821Z\",\n        \"id\": 5,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/5\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Satchel: The Life and Times of an American Legend\",\n        \"author\": \"Larry Tye\",\n        \"isbn\": \"0812977971\",\n        \"publicationDate\": \"2010-05-04\",\n        \"createdAt\": \"2021-06-27T19:44:37.598Z\",\n        \"updatedAt\": \"2021-06-27T19:44:37.598Z\",\n        \"id\": 6,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/6\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Writing To Learn\",\n        \"author\": \"William Zinsser\",\n        \"isbn\": \"0062720406\",\n        \"publicationDate\": \"1993-06-04\",\n        \"createdAt\": \"2021-06-27T19:44:37.624Z\",\n        \"updatedAt\": \"2021-06-27T19:44:37.624Z\",\n        \"id\": 7,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/7\"\n            }\n        ]\n    },\n    {\n        \"title\": \"John Calvin: A Pilgrim's Life\",\n        \"author\": \"Herman J. Selderhuis\",\n        \"isbn\": \"0830829210\",\n        \"publicationDate\": \"2009-02-21\",\n        \"createdAt\": \"2021-06-27T19:44:37.643Z\",\n        \"updatedAt\": \"2021-06-27T19:44:37.643Z\",\n        \"id\": 8,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/8\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:44:37.660Z\",\n        \"updatedAt\": \"2021-06-27T19:44:37.660Z\",\n        \"id\": 9,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/9\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Satchel: The Life and Times of an American Legend\",\n        \"author\": \"Larry Tye\",\n        \"isbn\": \"0812977971\",\n        \"publicationDate\": \"2010-05-04\",\n        \"createdAt\": \"2021-06-27T19:44:48.343Z\",\n        \"updatedAt\": \"2021-06-27T19:44:48.343Z\",\n        \"id\": 10,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/10\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Writing To Learn\",\n        \"author\": \"William Zinsser\",\n        \"isbn\": \"0062720406\",\n        \"publicationDate\": \"1993-06-04\",\n        \"createdAt\": \"2021-06-27T19:44:48.362Z\",\n        \"updatedAt\": \"2021-06-27T19:44:48.362Z\",\n        \"id\": 11,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/11\"\n            }\n        ]\n    },\n    {\n        \"title\": \"John Calvin: A Pilgrim's Life\",\n        \"author\": \"Herman J. Selderhuis\",\n        \"isbn\": \"0830829210\",\n        \"publicationDate\": \"2009-02-21\",\n        \"createdAt\": \"2021-06-27T19:44:48.382Z\",\n        \"updatedAt\": \"2021-06-27T19:44:48.382Z\",\n        \"id\": 12,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/12\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:44:48.402Z\",\n        \"updatedAt\": \"2021-06-27T19:44:48.402Z\",\n        \"id\": 13,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/13\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Satchel: The Life and Times of an American Legend\",\n        \"author\": \"Larry Tye\",\n        \"isbn\": \"0812977971\",\n        \"publicationDate\": \"2010-05-04\",\n        \"createdAt\": \"2021-06-27T19:53:22.817Z\",\n        \"updatedAt\": \"2021-06-27T19:53:22.817Z\",\n        \"id\": 14,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/14\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Writing To Learn\",\n        \"author\": \"William Zinsser\",\n        \"isbn\": \"0062720406\",\n        \"publicationDate\": \"1993-06-04\",\n        \"createdAt\": \"2021-06-27T19:53:22.845Z\",\n        \"updatedAt\": \"2021-06-27T19:53:22.845Z\",\n        \"id\": 15,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/15\"\n            }\n        ]\n    },\n    {\n        \"title\": \"John Calvin: A Pilgrim's Life\",\n        \"author\": \"Herman J. Selderhuis\",\n        \"isbn\": \"0830829210\",\n        \"publicationDate\": \"2009-02-21\",\n        \"createdAt\": \"2021-06-27T19:53:22.866Z\",\n        \"updatedAt\": \"2021-06-27T19:53:22.866Z\",\n        \"id\": 16,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/16\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:22.887Z\",\n        \"updatedAt\": \"2021-06-27T19:53:22.887Z\",\n        \"id\": 17,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/17\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Satchel: The Life and Times of an American Legend\",\n        \"author\": \"Larry Tye\",\n        \"isbn\": \"0812977971\",\n        \"publicationDate\": \"2010-05-04\",\n        \"createdAt\": \"2021-06-27T19:53:44.501Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.501Z\",\n        \"id\": 18,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/18\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Writing To Learn\",\n        \"author\": \"William Zinsser\",\n        \"isbn\": \"0062720406\",\n        \"publicationDate\": \"1993-06-04\",\n        \"createdAt\": \"2021-06-27T19:53:44.527Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.527Z\",\n        \"id\": 19,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/19\"\n            }\n        ]\n    },\n    {\n        \"title\": \"John Calvin: A Pilgrim's Life\",\n        \"author\": \"Herman J. Selderhuis\",\n        \"isbn\": \"0830829210\",\n        \"publicationDate\": \"2009-02-21\",\n        \"createdAt\": \"2021-06-27T19:53:44.543Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.543Z\",\n        \"id\": 20,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/20\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.563Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.563Z\",\n        \"id\": 21,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/21\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.584Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.584Z\",\n        \"id\": 22,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/22\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.602Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.602Z\",\n        \"id\": 23,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/23\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.620Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.620Z\",\n        \"id\": 24,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/24\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.644Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.644Z\",\n        \"id\": 25,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/25\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.664Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.664Z\",\n        \"id\": 26,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/26\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104524\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.686Z\",\n        \"updatedAt\": \"2025-03-31T00:50:12.307Z\",\n        \"id\": 27,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/27\"\n            }\n        ]\n    },\n    {\n        \"title\": \"test\",\n        \"author\": \"test\",\n        \"isbn\": \"2255\",\n        \"releaseDate\": \"12-12-2025\",\n        \"createdAt\": \"2025-05-03T15:16:14.769Z\",\n        \"updatedAt\": \"2025-05-03T15:16:14.769Z\",\n        \"id\": 28\n    },\n    {\n        \"title\": \"neww\",\n        \"author\": \"rewr\",\n        \"isbn\": \"rewr\",\n        \"releaseDate\": \"12/12/2025\",\n        \"createdAt\": \"2025-05-03T15:16:44.044Z\",\n        \"updatedAt\": \"2025-05-03T15:16:44.044Z\",\n        \"id\": 29\n    },\n    {\n        \"title\": \"rtertet\",\n        \"author\": \"test\",\n        \"isbn\": \"34234\",\n        \"releaseDate\": \"2025-01-01\",\n        \"createdAt\": \"2025-05-03T15:18:35.051Z\",\n        \"updatedAt\": \"2025-05-03T15:18:35.051Z\",\n        \"id\": 30\n    },\n    {\n        \"title\": \"testtt\",\n        \"author\": \"test\",\n        \"isbn\": \"323424\",\n        \"releaseDate\": \"12-12-2026\",\n        \"createdAt\": \"2025-05-03T15:18:54.867Z\",\n        \"updatedAt\": \"2025-05-03T15:18:54.867Z\",\n        \"id\": 31\n    },\n    {\n        \"title\": \"tessst\",\n        \"author\": \"ertfyu\",\n        \"isbn\": \"56258\",\n        \"releaseDate\": \"30-03-2025\",\n        \"createdAt\": \"2025-05-05T11:57:13.709Z\",\n        \"updatedAt\": \"2025-05-05T11:57:13.709Z\",\n        \"id\": 32\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T12:28:32.726Z\",\n        \"updatedAt\": \"2025-05-05T12:28:32.726Z\",\n        \"id\": 33\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T13:16:24.609Z\",\n        \"updatedAt\": \"2025-05-05T13:16:24.614Z\",\n        \"id\": 34\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T13:16:40.121Z\",\n        \"updatedAt\": \"2025-05-05T13:16:40.121Z\",\n        \"id\": 35\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T13:18:14.509Z\",\n        \"updatedAt\": \"2025-05-05T13:18:14.509Z\",\n        \"id\": 36\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T13:23:44.935Z\",\n        \"updatedAt\": \"2025-05-05T13:23:44.935Z\",\n        \"id\": 37\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T13:25:49.068Z\",\n        \"updatedAt\": \"2025-05-05T13:25:49.068Z\",\n        \"id\": 38\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T13:38:55.193Z\",\n        \"updatedAt\": \"2025-05-05T13:38:55.193Z\",\n        \"id\": 39\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T13:43:09.110Z\",\n        \"updatedAt\": \"2025-05-05T13:43:09.110Z\",\n        \"id\": 40\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T13:47:14.960Z\",\n        \"updatedAt\": \"2025-05-05T13:47:14.960Z\",\n        \"id\": 41\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T13:47:35.216Z\",\n        \"updatedAt\": \"2025-05-05T13:47:35.216Z\",\n        \"id\": 42\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T13:48:25.694Z\",\n        \"updatedAt\": \"2025-05-05T13:48:25.694Z\",\n        \"id\": 43\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T13:48:27.924Z\",\n        \"updatedAt\": \"2025-05-05T13:48:27.924Z\",\n        \"id\": 44\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T13:49:15.373Z\",\n        \"updatedAt\": \"2025-05-05T13:49:15.373Z\",\n        \"id\": 45\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T13:53:31.118Z\",\n        \"updatedAt\": \"2025-05-05T13:53:31.118Z\",\n        \"id\": 46\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T13:53:37.184Z\",\n        \"updatedAt\": \"2025-05-05T13:53:37.184Z\",\n        \"id\": 47\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T13:55:49.208Z\",\n        \"updatedAt\": \"2025-05-05T13:55:49.208Z\",\n        \"id\": 48\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T13:55:59.562Z\",\n        \"updatedAt\": \"2025-05-05T13:55:59.562Z\",\n        \"id\": 49\n    },\n    {\n        \"title\": \"{{randomBookName}}\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T13:59:29.057Z\",\n        \"updatedAt\": \"2025-05-05T13:59:29.057Z\",\n        \"id\": 50\n    },\n    {\n        \"title\": \"Lonely Dream of Romance\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T14:00:51.963Z\",\n        \"updatedAt\": \"2025-05-05T14:00:51.963Z\",\n        \"id\": 51\n    },\n    {\n        \"title\": \"Wandering Revenge\",\n        \"author\": \"{{Author}}\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T14:02:09.275Z\",\n        \"updatedAt\": \"2025-05-05T14:02:09.275Z\",\n        \"id\": 52\n    },\n    {\n        \"title\": \"Hidden Legacy\",\n        \"author\": \"Rebecca Wilson\",\n        \"isbn\": \"9781557730275\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-05T14:04:47.323Z\",\n        \"updatedAt\": \"2025-05-05T14:04:47.323Z\",\n        \"id\": 53\n    },\n    {\n        \"title\": \"Hidden Courage\",\n        \"author\": \"Emily Taylor\",\n        \"isbn\": \"9783624317259\",\n        \"releaseDate\": \"2016-07-11T04:53:32.862Z\",\n        \"createdAt\": \"2025-05-05T14:07:45.896Z\",\n        \"updatedAt\": \"2025-05-05T14:07:45.896Z\",\n        \"id\": 54\n    },\n    {\n        \"title\": \"Mystic Courage\",\n        \"author\": \"Emily Brown\",\n        \"isbn\": \"9789497564523\",\n        \"releaseDate\": \"2016-05-27T10:16:28.414Z\",\n        \"createdAt\": \"2025-05-05T14:08:43.945Z\",\n        \"updatedAt\": \"2025-05-05T14:08:43.945Z\",\n        \"id\": 55\n    },\n    {\n        \"title\": \"Lonely Heart\",\n        \"author\": \"Laura Smith\",\n        \"isbn\": \"9788058242481\",\n        \"releaseDate\": \"2000-04-21T19:46:15.934Z\",\n        \"createdAt\": \"2025-05-05T14:11:41.279Z\",\n        \"updatedAt\": \"2025-05-05T14:11:41.279Z\",\n        \"id\": 56\n    },\n    {\n        \"title\": \"Eternal Heart\",\n        \"author\": \"John Johnson\",\n        \"isbn\": \"9783256782524\",\n        \"releaseDate\": \"2017-09-08T02:38:05.274Z\",\n        \"createdAt\": \"2025-05-05T14:13:38.176Z\",\n        \"updatedAt\": \"2025-05-05T14:13:38.176Z\",\n        \"id\": 57\n    },\n    {\n        \"title\": \"Lonely Whisper\",\n        \"author\": \"David Taylor\",\n        \"isbn\": \"9783657917754\",\n        \"releaseDate\": \"2022-06-01T05:32:09.890Z\",\n        \"createdAt\": \"2025-05-05T14:20:39.924Z\",\n        \"updatedAt\": \"2025-05-05T14:20:39.924Z\",\n        \"id\": 58\n    },\n    {\n        \"title\": \"Endless Heart\",\n        \"author\": \"Laura Thomas\",\n        \"isbn\": \"9786370754569\",\n        \"releaseDate\": \"2015-07-21T05:17:01.614Z\",\n        \"createdAt\": \"2025-05-05T14:22:59.775Z\",\n        \"updatedAt\": \"2025-05-05T14:22:59.775Z\",\n        \"id\": 59\n    },\n    {\n        \"title\": \"Hidden Courage\",\n        \"author\": \"James Smith\",\n        \"isbn\": \"9783958474055\",\n        \"releaseDate\": \"2023-09-20T22:34:29.129Z\",\n        \"createdAt\": \"2025-05-05T14:23:13.092Z\",\n        \"updatedAt\": \"2025-05-05T14:23:13.092Z\",\n        \"id\": 60\n    },\n    {\n        \"title\": \"Fateful Kingdom\",\n        \"author\": \"Michael Johnson\",\n        \"isbn\": \"9788585546762\",\n        \"releaseDate\": \"2017-04-23T21:10:04.072Z\",\n        \"createdAt\": \"2025-05-05T14:24:19.706Z\",\n        \"updatedAt\": \"2025-05-05T14:24:19.706Z\",\n        \"id\": 61\n    },\n    {\n        \"title\": \"Lonely Legacy\",\n        \"author\": \"John Moore\",\n        \"isbn\": \"9787704060363\",\n        \"releaseDate\": \"2005-11-27T14:53:02.461Z\",\n        \"createdAt\": \"2025-05-05T14:26:56.321Z\",\n        \"updatedAt\": \"2025-05-05T14:26:56.321Z\",\n        \"id\": 62\n    },\n    {\n        \"title\": \"Lonely World\",\n        \"author\": \"Olivia Brown\",\n        \"isbn\": \"9783593201702\",\n        \"releaseDate\": \"2018-01-25T19:32:34.642Z\",\n        \"createdAt\": \"2025-05-05T14:27:16.149Z\",\n        \"updatedAt\": \"2025-05-05T14:27:16.149Z\",\n        \"id\": 63\n    }\n]"
						}
					]
				},
				{
					"name": "1.4 updateBookByID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomBookName() {\r",
									"  const adjectives = [\"Mystic\", \"Silent\", \"Hidden\", \"Fateful\", \"Endless\", \"Eternal\", \"Lonely\", \"Wandering\", \"Forgotten\"];\r",
									"  const nouns = [\"Journey\", \"Dream\", \"World\", \"Legacy\", \"Whisper\", \"Revenge\", \"Courage\", \"Heart\", \"Kingdom\"];\r",
									"\r",
									"  const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];\r",
									"  const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];\r",
									"\r",
									"  return `${randomAdjective} ${randomNoun}`;\r",
									"}\r",
									"\r",
									"var updatedRandomBookName = generateRandomBookName();\r",
									"pm.collectionVariables.set(\"updatedRandomBookName\",updatedRandomBookName);\r",
									"\r",
									"////////////////////////////////////////////////\r",
									"\r",
									"function generateRandomAuthorName() {\r",
									"  const firstNames = [\"James\", \"Sarah\", \"Michael\", \"Emily\", \"David\", \"Laura\", \"John\", \"Rebecca\", \"William\", \"Olivia\"];\r",
									"  const lastNames = [\"Smith\", \"Johnson\", \"Brown\", \"Davis\", \"Miller\", \"Wilson\", \"Moore\", \"Taylor\", \"Anderson\", \"Thomas\"];\r",
									"\r",
									"  const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"  const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"\r",
									"  return `${randomFirstName} ${randomLastName}`;\r",
									"}\r",
									"\r",
									"var updatedRandomAuthorName = generateRandomAuthorName();\r",
									"pm.collectionVariables.set(\"updatedRandomAuthorName\",updatedRandomAuthorName);\r",
									"\r",
									"//////////////////////////////////////////////////////////////////\r",
									"function generateRandomISBN() {\r",
									"  const prefix = \"978\"; // ISBN-13 prefix\r",
									"  let isbn = prefix;\r",
									"\r",
									"  // Generate the next 9 digits randomly\r",
									"  for (let i = 0; i < 9; i++) {\r",
									"    isbn += Math.floor(Math.random() * 10); // Random digit between 0 and 9\r",
									"  }\r",
									"  let sum = 0;\r",
									"  for (let i = 0; i < 12; i++) {\r",
									"    const digit = parseInt(isbn[i]);\r",
									"    sum += (i % 2 === 0) ? digit : digit * 3; // Alternate between multiplying by 1 and 3\r",
									"  }\r",
									"  const checkDigit = (10 - (sum % 10)) % 10; // ISBN-13 check digit formula\r",
									"  isbn += checkDigit;\r",
									"  return isbn;\r",
									"}\r",
									"\r",
									"var updatedRandomIBSN = generateRandomISBN();\r",
									"pm.collectionVariables.set(\"updatedRandomIBSN\",updatedRandomIBSN);\r",
									"\r",
									"//////////////////////////\r",
									"\r",
									"function generateRandomDate() {\r",
									"  // Set the start and end date range\r",
									"  const startDate = new Date('2000-01-01T00:00:00.000Z');\r",
									"  const endDate = new Date('2024-01-01T00:00:00.000Z');\r",
									"\r",
									"  // Generate a random timestamp between the start and end date\r",
									"  const randomTimestamp = startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime());\r",
									"\r",
									"  // Create a new Date object using the random timestamp\r",
									"  const randomDate = new Date(randomTimestamp);\r",
									"\r",
									"  // Format the date to match the desired format (YYYY-MM-DDTHH:mm:ss.sssZ)\r",
									"  return randomDate.toISOString();\r",
									"}\r",
									"var updatedRandomReleaseDate = generateRandomDate();\r",
									"pm.collectionVariables.set(\"updatedRandomReleaseDate\",updatedRandomReleaseDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"pm.test(\"[1.4] TC01 validate that Status code for update book request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.4] TC02 validate that response time for update book request less than 1000ms\" , function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.4] TC03 validate updated book response scheme as expected\", function () {\r",
									"    var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"author\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"isbn\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"releaseDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"createdAt\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"updatedAt\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"title\",\r",
									"    \"author\",\r",
									"    \"isbn\",\r",
									"    \"releaseDate\",\r",
									"    \"createdAt\",\r",
									"    \"updatedAt\",\r",
									"    \"id\"\r",
									"  ]\r",
									"};\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"//validate data to be as expected\r",
									"pm.test(\"[1.4] TC04 validate that updated book title in update book response is as expected\", function () {\r",
									"    pm.expect(responseBody.title).to.equal(requestBody.title);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.4] TC05 validate that updated book author in update book response is as expected\", function () {\r",
									"    pm.expect(responseBody.author).to.equal(requestBody.author);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.4] TC06 validate that updated book isbn in update book response is as expected\", function () {\r",
									"    pm.expect(responseBody.isbn).to.equal(requestBody.isbn);\r",
									"}); \r",
									"\r",
									"pm.test(\"[1.4] TC07 validate that update book releaseDate in update book response is as expected\", function () {\r",
									"    pm.expect(responseBody.releaseDate).to.equal(requestBody.releaseDate);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"[1.4] TC08 validate that updated id is in update book response not null and undefined\", function () {\r",
									"    pm.expect(responseBody.id).to.not.be.null;\r",
									"    pm.expect(responseBody.id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.4] TC09 validate that updated title in update book response not null and undefined\", function () {\r",
									"    pm.expect(responseBody.title).to.not.be.null;\r",
									"    pm.expect(responseBody.title).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.4] TC10 validate that updated author in updated book response not null and undefined\", function () {\r",
									"    pm.expect(responseBody.author).to.not.be.null;\r",
									"    pm.expect(responseBody.author).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.4] TC11 validate that updated isbn in update book response not null and undefined\", function () {\r",
									"    pm.expect(responseBody.isbn).to.not.be.null;\r",
									"    pm.expect(responseBody.isbn).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.4] TC12 validate that updated releaseDate in update book response is valid date format\", function () {\r",
									"    pm.expect(responseBody.releaseDate).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.4] TC13 validate that updated createdAt in update book response is valid date format\", function () {\r",
									"    pm.expect(responseBody.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"    });\r",
									"\r",
									"pm.test(\"[1.4] TC14 validate that updated updatedAt in update book response is valid date format\", function () {\r",
									"        pm.expect(responseBody.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"updatedTitle\", responseBody.title);\r",
									"pm.collectionVariables.set(\"updatedAutor\", responseBody.author);\r",
									"pm.collectionVariables.set(\"updatedIsbn\", responseBody.isbn);\r",
									"pm.collectionVariables.set(\"updatedReleaseDate\", responseBody.releaseDate);\r",
									"pm.collectionVariables.set(\"updatedCreatedAt\", responseBody.createdAt);\r",
									"pm.collectionVariables.set(\"updatedUpdatedAt\", responseBody.updatedAt);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{updatedRandomBookName}}\",\r\n    \"author\": \"{{updatedRandomAuthorName}}\",\r\n    \"isbn\": \"{{updatedRandomIBSN}}\",\r\n    \"releaseDate\": \"{{updatedRandomReleaseDate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/books/{{bookIdCreated}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"books",
								"{{bookIdCreated}}"
							]
						},
						"description": "## Update Book Details\n\nThis endpoint allows the user to update the details of a specific book by making an HTTP PUT request to the specified URL.\n\n### Request Body\n\n- **title** (string, required): The updated title of the book.\n    \n- **author** (string, required): The updated author of the book.\n    \n- **isbn** (string, required): The updated ISBN of the book.\n    \n- **releaseDate** (string, required): The updated release date of the book.\n    \n\n#### Example Request Body\n\n``` json\n{\n  \"title\": \"Updated Book Title\",\n  \"author\": \"Updated Author Name\",\n  \"isbn\": \"Updated ISBN Number\",\n  \"releaseDate\": \"Updated Release Date\"\n}\n\n ```\n\n### Response\n\nThe response will be a JSON object with the following properties:\n\n- **title** (string): The updated title of the book.\n    \n- **author** (string): The updated author of the book.\n    \n- **isbn** (string): The updated ISBN of the book.\n    \n- **releaseDate** (string): The updated release date of the book.\n    \n- **createdAt** (string): The creation date of the book entry.\n    \n- **updatedAt** (string): The date when the book details were last updated.\n    \n- **id** (number): The unique identifier of the book.\n    \n\n#### Example Response\n\n``` json\n{\n  \"title\": \"Updated Book Title\",\n  \"author\": \"Updated Author Name\",\n  \"isbn\": \"Updated ISBN Number\",\n  \"releaseDate\": \"Updated Release Date\",\n  \"createdAt\": \"2022-01-01\",\n  \"updatedAt\": \"2022-02-01\",\n  \"id\": 12345\n}\n\n ```"
					},
					"response": [
						{
							"name": "1.4 updateBookByID",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{updatedRandomBookName}}\",\r\n    \"author\": \"{{updatedRandomAuthorName}}\",\r\n    \"isbn\": \"{{updatedRandomIBSN}}\",\r\n    \"releaseDate\": \"{{updatedRandomReleaseDate}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/books/{{bookIdCreated}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"books",
										"{{bookIdCreated}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "230"
								},
								{
									"key": "ETag",
									"value": "W/\"e6-RxyzXcnrwT/W4Hpd3Om4UjPPoa4\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 15:17:17 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"Eternal Whisper\",\n    \"author\": \"Olivia Moore\",\n    \"isbn\": \"9780570421153\",\n    \"releaseDate\": \"2017-12-11T18:34:22.234Z\",\n    \"createdAt\": \"2025-05-05T14:37:54.915Z\",\n    \"updatedAt\": \"2025-05-05T15:17:17.137Z\",\n    \"id\": 64\n}"
						}
					]
				},
				{
					"name": "1.5 GetBookAfterUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"[1.5] TC01 vaidate that status code for get book by id is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.5] TC02 validate that response time for get book id is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.5] TC03 validate that book id in update response matches the same in request \", function () {\r",
									"    pm.expect(responseBody.id).to.eql(pm.collectionVariables.get(\"bookIdCreated\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[1.5] TC04 validate that book title in update response matches the same in request \", function () {\r",
									"    pm.expect(responseBody.title).to.eql(pm.collectionVariables.get(\"updatedTitle\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[1.5] TC05 validate that book author in update response matches the same in request \", function () {\r",
									"    pm.expect(responseBody.author).to.eql(pm.collectionVariables.get(\"updatedAutor\") );\r",
									"    });\r",
									"\r",
									"pm.test(\"[1.5] TC06 validate that book isbn in update response matches the same in request \", function () {\r",
									"    pm.expect(responseBody.isbn).to.eql(pm.collectionVariables.get(\"updatedIsbn\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[1.5] TC07 validate that book release date in update response matches the same in request \", function () {\r",
									"        pm.expect(responseBody.releaseDate).to.eql(pm.collectionVariables.get(\"updatedReleaseDate\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[1.5] TC08 validate that book created at in update response matches the same in request \", function () {\r",
									"    pm.expect(responseBody.createdAt).to.eql(pm.collectionVariables.get(\"updatedCreatedAt\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[1.5] TC09 validate that book updated at in update response matches the same in request \", function () {\r",
									"    pm.expect(responseBody.updatedAt).to.eql(pm.collectionVariables.get(\"updatedUpdatedAt\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[1.5] TC10 validate that title is not null, undefined or empty in get book request after update \", function () {\r",
									"    pm.expect(responseBody.title).to.not.be.null;\r",
									"    pm.expect(responseBody.title).to.not.be.undefined;\r",
									"    pm.expect(responseBody.title).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.5] TC11 validate that author is not null, undefined or empty in get book request after update \", function () {\r",
									"    pm.expect(responseBody.author).to.not.be.null;\r",
									"    pm.expect(responseBody.author).to.not.be.undefined;\r",
									"    pm.expect(responseBody.author).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.5] TC12 validate that isbn is not null, undefined or empty in get book request after update \", function () {\r",
									"    pm.expect(responseBody.isbn).to.not.be.null;\r",
									"    pm.expect(responseBody.isbn).to.not.be.undefined;\r",
									"    pm.expect(responseBody.isbn).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.5] TC13 validate that release date is not null, undefined or empty in get book request after update \", function () {\r",
									"    pm.expect(responseBody.releaseDate).to.not.be.null;\r",
									"    pm.expect(responseBody.releaseDate).to.not.be.undefined;\r",
									"    pm.expect(responseBody.releaseDate).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.5] TC14 validate that created at is not null, undefined or empty in get book request after update \", function () {\r",
									"    pm.expect(responseBody.createdAt).to.not.be.null;\r",
									"    pm.expect(responseBody.createdAt).to.not.be.undefined;\r",
									"    pm.expect(responseBody.createdAt).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.5] TC15 validate that updated at is not null, undefined or empty in get book request after update \", function () {\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.null;\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.undefined;\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.5] TC16 validate that id is not null, undefined or empty in get book request after update \", function () {\r",
									"    pm.expect(responseBody.id).to.not.be.null;\r",
									"    pm.expect(responseBody.id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.5] TC17 validate that response Fields have correct types\", function () {\r",
									"    pm.expect(responseBody.id).to.be.a(\"number\");\r",
									"    pm.expect(responseBody.title).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.author).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.isbn).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.releaseDate).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.updatedAt).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/books/{{bookIdCreated}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"books",
								"{{bookIdCreated}}"
							]
						},
						"description": "This endpoint retrieves information about a specific book identified by the provided book ID. The request should include the book ID in the URL path.\n\n### Request\n\n- Method: GET\n    \n- Endpoint: {{baseURL}}/books/{{bookIdCreated}}\n    \n\n### Response\n\nThe response will be a JSON object with the following properties:\n\n- `title` (string): The title of the book.\n    \n- `author` (string): The author of the book.\n    \n- `isbn` (string): The ISBN of the book.\n    \n- `releaseDate` (string): The release date of the book.\n    \n- `createdAt` (string): The date and time when the book record was created.\n    \n- `updatedAt` (string): The date and time when the book record was last updated.\n    \n- `id` (number): The unique identifier of the book.\n    \n\n#### JSON Schema\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"title\": {\"type\": \"string\"},\n    \"author\": {\"type\": \"string\"},\n    \"isbn\": {\"type\": \"string\"},\n    \"releaseDate\": {\"type\": \"string\"},\n    \"createdAt\": {\"type\": \"string\"},\n    \"updatedAt\": {\"type\": \"string\"},\n    \"id\": {\"type\": \"number\"}\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "1.5 GetBookAfterUpdate",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/books/{{bookIdCreated}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"books",
										"{{bookIdCreated}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "232"
								},
								{
									"key": "ETag",
									"value": "W/\"e8-7hrmHl/VxJOPmiXt08HrZKV67Bc\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 15:26:29 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"Forgotten Whisper\",\n    \"author\": \"John Johnson\",\n    \"isbn\": \"9787986552594\",\n    \"releaseDate\": \"2005-01-28T18:26:29.087Z\",\n    \"createdAt\": \"2025-05-05T14:37:54.915Z\",\n    \"updatedAt\": \"2025-05-05T15:25:40.296Z\",\n    \"id\": 64\n}"
						}
					]
				},
				{
					"name": "1.6 partialUpdate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomISBN() {\r",
									"  const prefix = \"978\"; // ISBN-13 prefix\r",
									"  let isbn = prefix;\r",
									"\r",
									"  // Generate the next 9 digits randomly\r",
									"  for (let i = 0; i < 9; i++) {\r",
									"    isbn += Math.floor(Math.random() * 10); // Random digit between 0 and 9\r",
									"  }\r",
									"  let sum = 0;\r",
									"  for (let i = 0; i < 12; i++) {\r",
									"    const digit = parseInt(isbn[i]);\r",
									"    sum += (i % 2 === 0) ? digit : digit * 3; // Alternate between multiplying by 1 and 3\r",
									"  }\r",
									"  const checkDigit = (10 - (sum % 10)) % 10; // ISBN-13 check digit formula\r",
									"  isbn += checkDigit;\r",
									"  return isbn;\r",
									"}\r",
									"\r",
									"var updatedRandomIBSN = generateRandomISBN();\r",
									"pm.collectionVariables.set(\"updatedRandomIBSN\",updatedRandomIBSN);\r",
									"\r",
									"//////////////////////////\r",
									"\r",
									"function generateRandomDate() {\r",
									"  // Set the start and end date range\r",
									"  const startDate = new Date('2000-01-01T00:00:00.000Z');\r",
									"  const endDate = new Date('2024-01-01T00:00:00.000Z');\r",
									"\r",
									"  // Generate a random timestamp between the start and end date\r",
									"  const randomTimestamp = startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime());\r",
									"\r",
									"  // Create a new Date object using the random timestamp\r",
									"  const randomDate = new Date(randomTimestamp);\r",
									"\r",
									"  // Format the date to match the desired format (YYYY-MM-DDTHH:mm:ss.sssZ)\r",
									"  return randomDate.toISOString();\r",
									"}\r",
									"var updatedRandomReleaseDate = generateRandomDate();\r",
									"pm.collectionVariables.set(\"updatedRandomReleaseDate\",updatedRandomReleaseDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.6] TC01 validate that Status code for parial update book request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"title\": \"Updated Title\", \r\n   \"author\": \"Updated Author\",\r\n    \"isbn\": \"{{updatedRandomIBSN}}\",\r\n    \"releaseDate\": \"{{updatedRandomReleaseDate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/books/{{bookIdCreated}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"books",
								"{{bookIdCreated}}"
							]
						},
						"description": "This endpoint allows you to update a specific book by sending an HTTP PUT request to the specified URL. The request should include the updated details of the book in the request body. The request body should be in raw format and include the following parameters:\n\n- `title`: The updated title of the book.\n    \n- `author`: The updated author of the book.\n    \n- `isbn`: The updated ISBN of the book.\n    \n- `releaseDate`: The updated release date of the book.\n    \n\n### Request Body\n\n``` json\n{\n  \"title\": \"Updated Title\",\n  \"author\": \"Updated Author\",\n  \"isbn\": \"{{updatedRandomIBSN}}\",\n  \"releaseDate\": \"{{updatedRandomReleaseDate}}\"\n}\n\n ```\n\n#### Response\n\nUpon a successful update, the response will include the updated details of the book, including the following parameters:\n\n- `title`: The updated title of the book.\n    \n- `author`: The updated author of the book.\n    \n- `isbn`: The updated ISBN of the book.\n    \n- `releaseDate`: The updated release date of the book.\n    \n- `createdAt`: The timestamp of when the book was created.\n    \n- `updatedAt`: The timestamp of when the book was last updated.\n    \n- `id`: The unique identifier of the updated book."
					},
					"response": [
						{
							"name": "1.6 partialUpdate",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"title\": \"Updated Title\", \r\n   \"author\": \"Updated Author\",\r\n    \"isbn\": \"{{updatedRandomIBSN}}\",\r\n    \"releaseDate\": \"{{updatedRandomReleaseDate}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/books/{{bookIdCreated}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"books",
										"{{bookIdCreated}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "230"
								},
								{
									"key": "ETag",
									"value": "W/\"e6-VoJR8AFkCgS060kGZcbD7b2OMJI\""
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 15:39:57 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"Updated Title\",\n    \"author\": \"Updated Author\",\n    \"isbn\": \"9786943427876\",\n    \"releaseDate\": \"2020-01-27T23:24:39.009Z\",\n    \"createdAt\": \"2025-05-07T15:39:53.259Z\",\n    \"updatedAt\": \"2025-05-07T15:39:57.171Z\",\n    \"id\": 68\n}"
						}
					]
				},
				{
					"name": "1.7 deleteBook",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.7] TC01 validate that Status code is 204 for delete book request\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/books/{{bookIdCreated}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"books",
								"{{bookIdCreated}}"
							]
						},
						"description": "### Delete Book\n\nThis endpoint is used to delete a specific book by providing the unique identifier of the book.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response\n\nThe response will not contain a response body. The status code will indicate the success or failure of the operation."
					},
					"response": [
						{
							"name": "1.7 deleteBook",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/books/{{bookIdCreated}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"books",
										"{{bookIdCreated}}"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 18:11:56 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "1.8 GetBookAfterDelete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.8] TC01 validate that Status code is 404 for get book details after delete\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/books/{{bookIdCreated}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"books",
								"{{bookIdCreated}}"
							]
						},
						"description": "### Update Book Details\n\nThis endpoint is used to update the details of a specific book.\n\n#### Request Body\n\n- `title` (text, required): The updated title of the book.\n    \n- `author` (text, required): The updated author of the book.\n    \n- `genre` (text, required): The updated genre of the book.\n    \n- `year` (text, required): The updated publication year of the book.\n    \n\n#### Response\n\nThe response of this request is a JSON object conforming to the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"updatedBook\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"title\": {\n          \"type\": \"string\"\n        },\n        \"author\": {\n          \"type\": \"string\"\n        },\n        \"genre\": {\n          \"type\": \"string\"\n        },\n        \"year\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "1.8 GetBookAfterDelete",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/books/{{bookIdCreated}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"books",
										"{{bookIdCreated}}"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "33"
								},
								{
									"key": "ETag",
									"value": "W/\"21-scWDTMDC1xwvJ1YlcV1rbeay1i4\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 18:12:06 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Book not found\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "2- Households",
			"item": [
				{
					"name": "2.1 createNewHousehold",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomHouseholdName() {\r",
									"    const adjectives = [\"Happy\", \"Sunny\", \"Cozy\", \"Quiet\", \"Lovely\"];\r",
									"    const nouns = [\"Nest\", \"Home\", \"Household\", \"Place\", \"Residence\"];\r",
									"    const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];\r",
									"    const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];\r",
									"    const randomNumber = Math.floor(1000 + Math.random() * 9000);\r",
									"\r",
									"    return `${randomAdjective}${randomNoun}${randomNumber}`;\r",
									"}\r",
									"\r",
									"var randomHouseHoldName = generateRandomHouseholdName();\r",
									"pm.collectionVariables.set(\"randomHouseHoldName\",randomHouseHoldName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"pm.test(\"[2.1] TC01 validate that Status code for create HouseHolds request is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC02 validate that response time for create HouseHolds request less than 1000ms\" , function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC03 validate create HouseHolds response scheme as expected\", function () {\r",
									"    var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"createdAt\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"updatedAt\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"name\",\r",
									"    \"createdAt\",\r",
									"    \"updatedAt\",\r",
									"    \"id\"\r",
									"  ]\r",
									"}\r",
									"\r",
									" pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"//validate data to be as expected\r",
									"pm.test(\"[2.1] TC04 validate that new HouseHolds name in create households response is as expected\", function () {\r",
									"    pm.expect(responseBody.name).to.equal(requestBody.name);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC05 validate that new HouseHolds name in create households response is not null and undefined\", function () {\r",
									"    pm.expect(responseBody.name).to.not.be.null;\r",
									"    pm.expect(responseBody.name).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC06 validate that createdAt is in valid date format\", function () {\r",
									"    pm.expect(responseBody.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC06 validate that updatedAt is in valid date format\", function () {\r",
									"    pm.expect(responseBody.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC05 validate that new households id created is not null and undefined in create households response \", function () {\r",
									"    pm.expect(responseBody.id).to.not.be.null;\r",
									"    pm.expect(responseBody.id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC06 validate that new households name created is not null and undefined in create households response \", function () {\r",
									"    pm.expect(responseBody.name).to.not.be.null;\r",
									"    pm.expect(responseBody.name).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC07 validate that new households createdAt created is not null and undefined in create households response \", function () {\r",
									"    pm.expect(responseBody.createdAt).to.not.be.null;\r",
									"    pm.expect(responseBody.createdAt).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC08 validate that new households updatedAt created is not null and undefined in create households response \", function () {\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.null;\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC09 validate that new households Response has all required fields\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"id\");\r",
									"    pm.expect(responseBody).to.have.property(\"name\");\r",
									"    pm.expect(responseBody).to.have.property(\"createdAt\");\r",
									"    pm.expect(responseBody).to.have.property(\"updatedAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC10 validate that new households Response have all Field types are correct\", function () {\r",
									"    pm.expect(responseBody.id).to.be.a(\"number\");\r",
									"    pm.expect(responseBody.name).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.updatedAt).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"houseHoldIdCreated\", responseBody.id);\r",
									"pm.collectionVariables.set(\"houseHoldCreatedName\" , responseBody.name);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{randomHouseHoldName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/households",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"households"
							]
						},
						"description": "### Create a New Household\n\nThis endpoint allows you to create a new household.\n\n#### Request Body\n\n- name (string, required): The name of the household.\n    \n\n#### Response\n\nThe response will be a JSON object with the following properties:\n\n- name (string): The name of the household.\n    \n- createdAt (string): The timestamp when the household was created.\n    \n- updatedAt (string): The timestamp when the household was last updated.\n    \n- id (integer): The unique identifier for the household.\n    \n\n#### JSON Schema\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": { \"type\": \"string\" },\n    \"createdAt\": { \"type\": \"string\" },\n    \"updatedAt\": { \"type\": \"string\" },\n    \"id\": { \"type\": \"integer\" }\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "2.1 createNewHousehold",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{randomHouseHoldName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/households",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"households"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "132"
								},
								{
									"key": "ETag",
									"value": "W/\"84-GktkRocdgNeYGl4VqJSw8XS5Wxo\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 15:46:44 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"HappyResidence1066\",\n    \"createdAt\": \"2025-05-05T15:46:44.179Z\",\n    \"updatedAt\": \"2025-05-05T15:46:44.179Z\",\n    \"id\": 20\n}"
						}
					]
				},
				{
					"name": "2.2 getHouseHoldById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"[2.2] TC01 validate that Status code for get HouseHolds request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.2] TC02 validate that response time for get HouseHolds request less than 1000ms\" , function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[2.2] TC03 validate that houseHold id in response matches the same in creating request \", function () {\r",
									"    pm.expect(responseBody.id).to.eql(pm.collectionVariables.get(\"houseHoldIdCreated\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[2.2] TC04 validate that houseHold name in response matches the same in creating request \", function () {\r",
									"    pm.expect(responseBody.name).to.eql(pm.collectionVariables.get(\"houseHoldCreatedName\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[2.2] TC05 validate that household name is not null, undefined or empty in get household request \", function () {\r",
									"    pm.expect(responseBody.name).to.not.be.null;\r",
									"    pm.expect(responseBody.name).to.not.be.undefined;\r",
									"    pm.expect(responseBody.name).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.2] TC06 validate that household id is not null, undefined or empty in get household request\", function () {\r",
									"    pm.expect(responseBody.id).to.not.be.null;\r",
									"    pm.expect(responseBody.id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.2] TC07 validate that household createdAt is not null, undefined or empty in get household request\", function () {\r",
									"    pm.expect(responseBody.createdAt).to.not.be.null;\r",
									"    pm.expect(responseBody.createdAt).to.not.be.undefined;\r",
									"    pm.expect(responseBody.createdAt).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.2] TC08 validate that houseHold updateAt is not null, undefined or empty in get household request\", function () {\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.null;\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.undefined;\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/households/{{houseHoldIdCreated}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"households",
								"{{houseHoldIdCreated}}"
							]
						},
						"description": "# Get Household Details\n\nThis endpoint retrieves the details of a specific household based on the provided household ID.\n\n## Request\n\n### Request URL\n\n- `GET /households/{{houseHoldIdCreated}}`\n    \n\n### Request Body\n\nThis request does not require a request body.\n\n## Response\n\n### Response Body\n\n- `name` (string, optional): The name of the household.\n    \n- `createdAt` (string, optional): The timestamp when the household was created.\n    \n- `updatedAt` (string, optional): The timestamp when the household was last updated.\n    \n- `id` (integer): The unique identifier of the household.\n    \n\n#### Example\n\n``` json\n{\n    \"name\": \"\",\n    \"createdAt\": \"\",\n    \"updatedAt\": \"\",\n    \"id\": 0\n}\n\n ```"
					},
					"response": [
						{
							"name": "2.2 getHouseHoldById",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/households/{{houseHoldIdCreated}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"households",
										"{{houseHoldIdCreated}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "127"
								},
								{
									"key": "ETag",
									"value": "W/\"7f-G7VR30WRZoKKjfFSckkQGS2hE5s\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 17:15:58 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"CozyPlace7233\",\n    \"createdAt\": \"2025-05-05T17:10:35.655Z\",\n    \"updatedAt\": \"2025-05-05T17:10:35.655Z\",\n    \"id\": 26\n}"
						}
					]
				},
				{
					"name": "2.3 getAllHouseHolds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"[2.3] TC01 vaidate that status code for get all households request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.3] TC02 validate that response time for get all households request is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.3] TC03 validate that Response for get all households request is an array\", function () {\r",
									"    pm.expect(responseBody).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"[2.3] TC04 validate that Response for get all households request is not empty\", function () {\r",
									"    pm.expect(responseBody).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"// validate that first two object have schema as expected\r",
									"responseBody.slice(0, 2).forEach((item, index) => {\r",
									"    pm.test(`[2.3] TC05 validate that Item ${index} in response has id as number`, function () {\r",
									"        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
									"        pm.expect(item).to.not.be.undefined;\r",
									"    });\r",
									"\r",
									"    pm.test(`[2.3] TC06 validate that Item ${index} in response has name as string`, function () {\r",
									"        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
									"    });\r",
									"\r",
									"    pm.test(`[2.3] TC07 validate that Item ${index} in response has createdAt as string `, function () {\r",
									"        pm.expect(item).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
									"    });\r",
									"\r",
									"    pm.test(`[2.3] TC08 validate that Item ${index} in response has updatedAt as string `, function () {\r",
									"        pm.expect(item).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/households",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"households"
							]
						},
						"description": "This endpoint retrieves a list of households. The request does not require any request body parameters.\n\nThe response will include an array of household objects, where each object contains the following properties:\n\n- \"name\": The name of the household.\n    \n- \"createdAt\": The timestamp when the household was created.\n    \n- \"updatedAt\": The timestamp when the household was last updated.\n    \n- \"id\": The unique identifier for the household.\n    \n- \"links\": An array of links associated with the household, where each link object contains \"rel\" (relation) and \"href\" (URL) properties."
					},
					"response": [
						{
							"name": "2.3 getAllHouseHolds",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/households",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"households"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"162a-n8Fz72cXugNAiv33cBXnpgWGtr0\""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 17:16:08 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-26T20:26:10.531Z\",\n        \"updatedAt\": \"2021-06-26T20:26:10.531Z\",\n        \"id\": 1,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/1\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-26T21:33:28.552Z\",\n        \"updatedAt\": \"2021-06-26T21:33:28.552Z\",\n        \"id\": 2,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/2\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-26T21:34:19.926Z\",\n        \"updatedAt\": \"2021-06-26T21:34:19.926Z\",\n        \"id\": 3,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/3\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-27T18:49:47.360Z\",\n        \"updatedAt\": \"2021-06-27T18:49:47.360Z\",\n        \"id\": 4,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/4\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-27T18:50:08.649Z\",\n        \"updatedAt\": \"2021-06-27T18:50:08.649Z\",\n        \"id\": 5,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/5\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-27T19:02:34.438Z\",\n        \"updatedAt\": \"2021-06-27T19:02:34.438Z\",\n        \"id\": 6,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/6\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:24:17.906Z\",\n        \"updatedAt\": \"2021-06-29T23:24:17.906Z\",\n        \"id\": 7,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/7\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:25:54.956Z\",\n        \"updatedAt\": \"2021-06-29T23:25:54.956Z\",\n        \"id\": 8,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/8\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:27:22.503Z\",\n        \"updatedAt\": \"2021-06-29T23:27:22.503Z\",\n        \"id\": 9,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/9\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:27:49.847Z\",\n        \"updatedAt\": \"2021-06-29T23:27:49.847Z\",\n        \"id\": 10,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/10\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:28:08.408Z\",\n        \"updatedAt\": \"2021-06-29T23:28:08.408Z\",\n        \"id\": 11,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/11\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:28:17.226Z\",\n        \"updatedAt\": \"2021-06-29T23:28:17.226Z\",\n        \"id\": 12,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/12\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:29:10.920Z\",\n        \"updatedAt\": \"2021-06-29T23:29:10.920Z\",\n        \"id\": 13,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/13\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:31:02.870Z\",\n        \"updatedAt\": \"2021-06-29T23:31:02.870Z\",\n        \"id\": 14,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/14\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:31:11.762Z\",\n        \"updatedAt\": \"2021-06-29T23:31:11.762Z\",\n        \"id\": 15,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/15\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:32:12.201Z\",\n        \"updatedAt\": \"2021-06-29T23:32:12.201Z\",\n        \"id\": 16,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/16\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-30T00:23:07.225Z\",\n        \"updatedAt\": \"2021-06-30T00:23:07.225Z\",\n        \"id\": 17,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/17\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-07-10T23:52:56.361Z\",\n        \"updatedAt\": \"2021-07-10T23:52:56.361Z\",\n        \"id\": 18\n    },\n    {\n        \"name\": \"Household Name\",\n        \"createdAt\": \"2025-05-05T15:44:26.021Z\",\n        \"updatedAt\": \"2025-05-05T15:44:26.021Z\",\n        \"id\": 19\n    },\n    {\n        \"name\": \"HappyResidence1066\",\n        \"createdAt\": \"2025-05-05T15:46:44.179Z\",\n        \"updatedAt\": \"2025-05-05T15:46:44.179Z\",\n        \"id\": 20\n    },\n    {\n        \"name\": \"QuietNest2967\",\n        \"createdAt\": \"2025-05-05T16:56:41.934Z\",\n        \"updatedAt\": \"2025-05-05T16:56:41.935Z\",\n        \"id\": 21\n    },\n    {\n        \"name\": \"SunnyHousehold8205\",\n        \"createdAt\": \"2025-05-05T16:59:57.713Z\",\n        \"updatedAt\": \"2025-05-05T16:59:57.713Z\",\n        \"id\": 22\n    },\n    {\n        \"name\": \"CozyHome9019\",\n        \"createdAt\": \"2025-05-05T17:01:54.009Z\",\n        \"updatedAt\": \"2025-05-05T17:01:54.009Z\",\n        \"id\": 23\n    },\n    {\n        \"name\": \"HappyResidence6923\",\n        \"createdAt\": \"2025-05-05T17:03:20.952Z\",\n        \"updatedAt\": \"2025-05-05T17:03:20.952Z\",\n        \"id\": 24\n    },\n    {\n        \"name\": \"CozyPlace5371\",\n        \"createdAt\": \"2025-05-05T17:06:41.184Z\",\n        \"updatedAt\": \"2025-05-05T17:06:41.184Z\",\n        \"id\": 25\n    },\n    {\n        \"name\": \"CozyPlace7233\",\n        \"createdAt\": \"2025-05-05T17:10:35.655Z\",\n        \"updatedAt\": \"2025-05-05T17:10:35.655Z\",\n        \"id\": 26\n    }\n]"
						}
					]
				},
				{
					"name": "2.4 updateCreatedHouseHold",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomHouseholdName() {\r",
									"    const adjectives = [\"Happy\", \"Sunny\", \"Cozy\", \"Quiet\", \"Lovely\"];\r",
									"    const nouns = [\"Nest\", \"Home\", \"Household\", \"Place\", \"Residence\"];\r",
									"    const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];\r",
									"    const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];\r",
									"    const randomNumber = Math.floor(1000 + Math.random() * 9000);\r",
									"\r",
									"    return `${randomAdjective}${randomNoun}${randomNumber}`;\r",
									"}\r",
									"\r",
									"var updatedRandomHouseHoldName = generateRandomHouseholdName();\r",
									"pm.collectionVariables.set(\"updatedRandomHouseHoldName\",updatedRandomHouseHoldName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"pm.test(\"[2.4] TC01 validate that Status code for create HouseHolds request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.4] TC02 validate that response time for create HouseHolds request less than 1000ms\" , function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.4] TC03 validate create HouseHolds response scheme as expected\", function () {\r",
									"    var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"createdAt\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"updatedAt\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"name\",\r",
									"    \"createdAt\",\r",
									"    \"updatedAt\",\r",
									"    \"id\"\r",
									"  ]\r",
									"}\r",
									"\r",
									" pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"//validate data to be as expected\r",
									"pm.test(\"[2.4] TC04 validate that new HouseHolds name in create households response is as expected\", function () {\r",
									"    pm.expect(responseBody.name).to.equal(requestBody.name);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.4] TC05 validate that new HouseHolds name in create households response is not null and undefined\", function () {\r",
									"    pm.expect(responseBody.name).to.not.be.null;\r",
									"    pm.expect(responseBody.name).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.4] TC06 validate that createdAt is in valid date format\", function () {\r",
									"    pm.expect(responseBody.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.4] TC06 validate that updatedAt is in valid date format\", function () {\r",
									"    pm.expect(responseBody.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.4] TC05 validate that new households id created is not null and undefined in create households response \", function () {\r",
									"    pm.expect(responseBody.id).to.not.be.null;\r",
									"    pm.expect(responseBody.id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.4] TC06 validate that new households name created is not null and undefined in create households response \", function () {\r",
									"    pm.expect(responseBody.name).to.not.be.null;\r",
									"    pm.expect(responseBody.name).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.4] TC07 validate that new households createdAt created is not null and undefined in create households response \", function () {\r",
									"    pm.expect(responseBody.createdAt).to.not.be.null;\r",
									"    pm.expect(responseBody.createdAt).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.4] TC08 validate that new households updatedAt created is not null and undefined in create households response \", function () {\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.null;\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.4] TC09 validate that new households Response has all required fields\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"id\");\r",
									"    pm.expect(responseBody).to.have.property(\"name\");\r",
									"    pm.expect(responseBody).to.have.property(\"createdAt\");\r",
									"    pm.expect(responseBody).to.have.property(\"updatedAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"[2.4] TC10 validate that new households Response have all Field types are correct\", function () {\r",
									"    pm.expect(responseBody.id).to.be.a(\"number\");\r",
									"    pm.expect(responseBody.name).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.updatedAt).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"updatedHouseHoldIdCreated\", responseBody.id);\r",
									"pm.collectionVariables.set(\"updatedHouseHoldCreatedName\" , responseBody.name);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{updatedRandomHouseHoldName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/households/{{houseHoldIdCreated}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"households",
								"{{houseHoldIdCreated}}"
							]
						},
						"description": "This endpoint allows you to update a specific household by making an HTTP PUT request to the specified URL. The request should include a JSON payload in the raw request body type with the updated name of the household.\n\n### Request Body\n\n| Key | Type | Description |\n| --- | --- | --- |\n| name | string | The updated name of the household |\n\n### Response\n\nThe response will include the updated details of the household, including the name, creation timestamp, update timestamp, and the unique identifier.\n\nExample Response:\n\n``` json\n{\n    \"name\": \"updatedName\",\n    \"createdAt\": \"timestamp\",\n    \"updatedAt\": \"timestamp\",\n    \"id\": 123\n}\n\n ```"
					},
					"response": [
						{
							"name": "2.4 updateCreatedHouseHold",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{updatedRandomHouseHoldName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/households/{{houseHoldIdCreated}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"households",
										"{{houseHoldIdCreated}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "127"
								},
								{
									"key": "ETag",
									"value": "W/\"7f-Hnctzpm8pe8MZusJihj7tWo9tlQ\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 17:45:43 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"HappyNest8160\",\n    \"createdAt\": \"2025-05-05T17:26:38.233Z\",\n    \"updatedAt\": \"2025-05-05T17:45:43.917Z\",\n    \"id\": 28\n}"
						}
					]
				},
				{
					"name": "2.5 getHouseHoldAfterUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"[2.5] TC01 vaidate that status code for get household by id is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.5] TC02 validate that response time for get household id is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[2.5] TC03 validate that household id in update response matches the same in request \", function () {\r",
									"    pm.expect(responseBody.id).to.eql(pm.collectionVariables.get(\"updatedHouseHoldIdCreated\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[2.5] TC04 validate that household name in get response matches the same in update household request \", function (){\r",
									"    pm.expect(responseBody.name).to.eql(pm.collectionVariables.get(\"updatedHouseHoldCreatedName\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[2.5] TC05 validate that household name is not null, undefined or empty in get household request after update \", function () {\r",
									"    pm.expect(responseBody.name).to.not.be.null;\r",
									"    pm.expect(responseBody.name).to.not.be.undefined;\r",
									"    pm.expect(responseBody.name).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.5] TC06 validate that household id is not null, undefined or empty in get household request after update \", function () {\r",
									"    pm.expect(responseBody.id).to.not.be.null;\r",
									"    pm.expect(responseBody.id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.5] TC07 validate that createdAt is not null, undefined or empty in get household request after update \", function () {\r",
									"    pm.expect(responseBody.createdAt).to.not.be.null;\r",
									"    pm.expect(responseBody.createdAt).to.not.be.undefined;\r",
									"    pm.expect(responseBody.createdAt).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.5] TC08 validate that updatedAt is not null, undefined or empty in get household request after update \", function () {\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.null;\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.undefined;\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.5] TC09 validate that Response contains all required fields\", function () {\r",
									"    pm.expect(responseBody).to.have.all.keys(\"id\", \"name\", \"createdAt\", \"updatedAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"[2.5] TC10 validate that response Fields have correct types\", function () {\r",
									"    pm.expect(responseBody.id).to.be.a(\"number\");\r",
									"    pm.expect(responseBody.name).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.updatedAt).to.be.a(\"string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/households/{{houseHoldIdCreated}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"households",
								"{{houseHoldIdCreated}}"
							]
						},
						"description": "# Get Household Details\n\nThis endpoint retrieves the details of a specific household based on the provided `houseHoldIdCreated`.\n\n## Request\n\n### Request Body\n\nThis request does not require a request body.\n\n### Request Parameters\n\n- `houseHoldIdCreated` (path parameter) - The ID of the household for which details are to be retrieved.\n    \n\n### Example Request\n\n```\nGET {{baseURL}}/households/{{houseHoldIdCreated}}\n\n ```\n\n## Response\n\nThe response will be a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"createdAt\": {\n      \"type\": \"string\"\n    },\n    \"updatedAt\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"integer\"\n    }\n  }\n}\n\n ```\n\n### Response Body\n\nThe response body will contain the following fields:\n\n- `name` (string) - The name of the household.\n    \n- `createdAt` (string) - The timestamp when the household was created.\n    \n- `updatedAt` (string) - The timestamp when the household was last updated.\n    \n- `id` (integer) - The unique identifier of the household.\n    \n\n### Example Response\n\n``` json\n{\n  \"name\": \"Household Name\",\n  \"createdAt\": \"2022-01-01T12:00:00Z\",\n  \"updatedAt\": \"2022-01-02T08:00:00Z\",\n  \"id\": 12345\n}\n\n ```"
					},
					"response": [
						{
							"name": "2.2 getHouseHoldAfterUpdate",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/households/{{houseHoldIdCreated}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"households",
										"{{houseHoldIdCreated}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "136"
								},
								{
									"key": "ETag",
									"value": "W/\"88-v0NwqJc+blmerWsbHONUcuPiCzU\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 17:16:44 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Updated Household Name\",\n    \"createdAt\": \"2025-05-05T17:10:35.655Z\",\n    \"updatedAt\": \"2025-05-05T17:16:31.443Z\",\n    \"id\": 26\n}"
						}
					]
				},
				{
					"name": "2.6 partialUpdate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomHouseholdName() {\r",
									"    const adjectives = [\"Happy\", \"Sunny\", \"Cozy\", \"Quiet\", \"Lovely\"];\r",
									"    const nouns = [\"Nest\", \"Home\", \"Household\", \"Place\", \"Residence\"];\r",
									"    const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];\r",
									"    const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];\r",
									"    const randomNumber = Math.floor(1000 + Math.random() * 9000);\r",
									"\r",
									"    return `${randomAdjective}${randomNoun}${randomNumber}`;\r",
									"}\r",
									"\r",
									"var updatedRandomHouseHoldName = generateRandomHouseholdName();\r",
									"pm.collectionVariables.set(\"updatedRandomHouseHoldName\",updatedRandomHouseHoldName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[2.6] TC01 validate that Status code for partial update HouseHolds request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{updatedRandomHouseHoldName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}//households/{{houseHoldIdCreated}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"",
								"households",
								"{{houseHoldIdCreated}}"
							]
						},
						"description": "This API endpoint is used to update a specific household identified by the provided `houseHoldIdCreated`. The HTTP PATCH request allows modification of the household details.\n\n### Request Body\n\nThe request body should be in raw format and include the updated `name` for the household.\n\n- `name`: (string) The updated name of the household.\n    \n\n### Response\n\nThe response will include the updated details of the household after the PATCH request is successfully processed."
					},
					"response": [
						{
							"name": "2.6 partialUpdate",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{updatedRandomHouseHoldName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}//households/{{houseHoldIdCreated}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"",
										"households",
										"{{houseHoldIdCreated}}"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 15:48:27 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				},
				{
					"name": "2.7 deleteHouseHold",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[2.7] TC01 validate that Status code is 204 for delete household request\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/households/{{houseHoldIdCreated}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"households",
								"{{houseHoldIdCreated}}"
							]
						},
						"description": "### Delete Household\n\nThis endpoint is used to delete a specific household identified by the `houseHoldIdCreated`.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response\n\n- 200 OK: The household with the specified `houseHoldIdCreated` has been successfully deleted.\n    \n- 404 Not Found: The specified `houseHoldIdCreated` does not exist."
					},
					"response": [
						{
							"name": "2.7 deleteHouseHold",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/households/{{houseHoldIdCreated}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"households",
										"{{houseHoldIdCreated}}"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 17:18:25 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "2.8 getHouseHoldAfterDelete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2.8] TC01 validate that Status code is 404 for get household details after delete\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/households/{{houseHoldIdCreated}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"households",
								"{{houseHoldIdCreated}}"
							]
						},
						"description": "This endpoint retrieves information about a specific household by making an HTTP GET request to the specified URL. The request should include the `houseHoldIdCreated` parameter in the URL path to identify the specific household.\n\n### Request Body\n\nThis request does not require a request body.\n\n### Response Body\n\nUpon a successful request, the response will include the following information about the household:\n\n- `name`: The name of the household\n    \n- `createdAt`: The timestamp when the household was created\n    \n- `updatedAt`: The timestamp when the household was last updated\n    \n- `id`: The unique identifier of the household\n    \n\nPlease note that the actual values for `name`, `createdAt`, `updatedAt`, and `id` will be provided in the response.\n\n#### Example\n\n``` json\n{\n  \"name\": \"Household Name\",\n  \"createdAt\": \"2022-01-01T12:00:00Z\",\n  \"updatedAt\": \"2022-01-02T08:00:00Z\",\n  \"id\": 12345\n}\n\n ```"
					},
					"response": [
						{
							"name": "2.8 getHouseHoldAfterUpdate",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/households/{{houseHoldIdCreated}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"households",
										"{{houseHoldIdCreated}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "136"
								},
								{
									"key": "ETag",
									"value": "W/\"88-v0NwqJc+blmerWsbHONUcuPiCzU\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 17:16:44 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Updated Household Name\",\n    \"createdAt\": \"2025-05-05T17:10:35.655Z\",\n    \"updatedAt\": \"2025-05-05T17:16:31.443Z\",\n    \"id\": 26\n}"
						}
					]
				}
			]
		},
		{
			"name": "3- Users",
			"item": [
				{
					"name": "3.1 createNewUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"pm.test(\"[3.1] TC01 validate that Status code for create user request is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.1] TC02 validate that response time for create user request less than 1000ms\" , function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.1] TC03 validate create user response scheme as expected\", function () {\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"firstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"createdAt\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"updatedAt\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"firstName\",\r",
									"    \"lastName\",\r",
									"    \"email\",\r",
									"    \"createdAt\",\r",
									"    \"updatedAt\",\r",
									"    \"id\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									" pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"//validate data to be as expected\r",
									"pm.test(\"[3.1] TC04 validate that new user firstname in create user response is as expected\", function () {\r",
									"    pm.expect(responseBody.firstName).to.equal(requestBody.firstName);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.1] TC05 validate that new user lastName in create user response is as expected\", function () {\r",
									"    pm.expect(responseBody.lastName).to.equal(requestBody.lastName);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.1] TC06 validate that new user mail in create user response is as expected\", function () {\r",
									"    pm.expect(responseBody.email).to.equal(requestBody.email);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.1] TC07 validate that new username firstname in create user response is not null and undefined\", function () {\r",
									"    pm.expect(responseBody.firstName).to.not.be.null;\r",
									"    pm.expect(responseBody.firstName).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[3.1] TC08 validate that new username lastname in create user response is not null and undefined\", function () {\r",
									"    pm.expect(responseBody.lastName).to.not.be.null;\r",
									"    pm.expect(responseBody.lastName).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[3.1] TC09 validate that new username email in create user response is not null and undefined\", function () {\r",
									"    pm.expect(responseBody.email).to.not.be.null;\r",
									"    pm.expect(responseBody.email).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[3.1] TC10 validate that createdAt is in valid date format\", function () {\r",
									"    pm.expect(responseBody.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.1] TC11 validate that updatedAt is in valid date format\", function () {\r",
									"    pm.expect(responseBody.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"userFirstName\", responseBody.firstName);\r",
									"pm.collectionVariables.set(\"userLastName\", responseBody.lastName);\r",
									"pm.collectionVariables.set(\"userEmail\", responseBody.email);\r",
									"pm.collectionVariables.set(\"userCreatedAt\", responseBody.createdAt);\r",
									"pm.collectionVariables.set(\"userUpdatedAt\", responseBody.updatedAt);\r",
									"pm.collectionVariables.set(\"userIdCreated\", responseBody.id);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							]
						},
						"description": "### Add User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `firstName` (string, required): The first name of the user.\n    \n- `lastName` (string, required): The last name of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n\nExample:\n\n``` json\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"johndoe@example.com\"\n}\n\n ```\n\n#### Response\n\n- `firstName` (string): The first name of the added user.\n    \n- `lastName` (string): The last name of the added user.\n    \n- `email` (string): The email address of the added user.\n    \n- `createdAt` (string): The timestamp when the user was created.\n    \n- `updatedAt` (string): The timestamp when the user was last updated.\n    \n- `id` (integer): The unique identifier of the added user.\n    \n\nExample:\n\n``` json\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"johndoe@example.com\",\n  \"createdAt\": \"2022-01-01T12:00:00Z\",\n  \"updatedAt\": \"2022-01-01T12:00:00Z\",\n  \"id\": 123\n}\n\n ```"
					},
					"response": [
						{
							"name": "3.1 createNewUser",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "192"
								},
								{
									"key": "ETag",
									"value": "W/\"c0-YK7UI2t+WCrKxGajT6VlIyz2mpY\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 18:17:55 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Christop\",\n    \"lastName\": \"Murray\",\n    \"email\": \"Jazlyn.Kunze78@hotmail.com\",\n    \"createdAt\": \"2025-05-05T18:17:55.715Z\",\n    \"updatedAt\": \"2025-05-05T18:17:55.715Z\",\n    \"id\": 38\n}"
						}
					]
				},
				{
					"name": "3.2 getUserDetailByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"[3.2] TC01 validate that Status code for get user details request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.2] TC02 validate that response time for get user details request less than 1000ms\" , function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[3.2] TC03 validate that user firstname in response matches the same in creating request \", function () {\r",
									"    pm.expect(responseBody.firstName).to.eql(pm.collectionVariables.get(\"userFirstName\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[3.2] TC04 validate that user lastname in response matches the same in creating request \", function () {\r",
									"    pm.expect(responseBody.lastName).to.eql(pm.collectionVariables.get(\"userLastName\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[3.2] TC05 validate that user email in response matches the same in creating request \", function () {\r",
									"    pm.expect(responseBody.email).to.eql(pm.collectionVariables.get(\"userEmail\") );\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[3.2] TC06 validate that user firstname is not null, undefined or empty in get user request \", function () {\r",
									"    pm.expect(responseBody.firstName).to.not.be.null;\r",
									"    pm.expect(responseBody.firstName).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[3.2] TC06 validate that user lastname is not null, undefined or empty in get user request\", function () {\r",
									"    pm.expect(responseBody.lastName).to.not.be.null;\r",
									"    pm.expect(responseBody.lastName).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[3.2] TC07 validate that user createdAt is not null, undefined or empty in get user request\", function () {\r",
									"    pm.expect(responseBody.createdAt).to.not.be.null;\r",
									"    pm.expect(responseBody.createdAt).to.not.be.undefined;\r",
									"    pm.expect(responseBody.createdAt).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[3.2] TC08 validate that user updateAt is not null, undefined or empty in get user request\", function () {\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.null;\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.undefined;\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[3.2] TC09 validate that get user response has all required fields\", function () {\r",
									"    pm.expect(responseBody).to.have.all.keys(\"firstName\", \"lastName\", \"email\", \"createdAt\", \"updatedAt\", \"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"[3.2] TC10 validate that get user response has correct data types\", function () {\r",
									"    pm.expect(responseBody.firstName).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.lastName).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.email).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/users/{{userIdCreated}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{userIdCreated}}"
							]
						},
						"description": "# Get User Details\n\nThis endpoint retrieves the details of a specific user based on the user ID.\n\n## Request\n\n### Path Parameters\n\n- `userIdCreated` (integer) - The unique identifier of the user.\n    \n\n## Response\n\nThe response will be a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"firstName\": {\n      \"type\": \"string\"\n    },\n    \"lastName\": {\n      \"type\": \"string\"\n    },\n    \"email\": {\n      \"type\": \"string\"\n    },\n    \"createdAt\": {\n      \"type\": \"string\"\n    },\n    \"updatedAt\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"integer\"\n    }\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "3.1 getUserDetailsByID",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/users/{{userIdCreated}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"{{userIdCreated}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "183"
								},
								{
									"key": "ETag",
									"value": "W/\"b7-i0G8Npzr4jxuJXw9W4cIyLIDcCU\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 18:29:01 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Lynn\",\n    \"lastName\": \"Bode\",\n    \"email\": \"Bart_Weber2@hotmail.com\",\n    \"createdAt\": \"2025-05-05T18:27:11.878Z\",\n    \"updatedAt\": \"2025-05-05T18:27:11.878Z\",\n    \"id\": 41\n}"
						}
					]
				},
				{
					"name": "3.3 getAllUsersCreated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"[3.3] TC01 vaidate that status code for get all users request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.3] TC02 validate that response time for get all users request is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.3] TC03 validate that Response for get all users request is an array\", function () {\r",
									"    pm.expect(responseBody).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"[3.3] TC04 validate that Response for get all users request is not empty\", function () {\r",
									"    pm.expect(responseBody).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"// validate that first two object have schema as expected\r",
									"responseBody.slice(0, 2).forEach((item, index) => {\r",
									"    pm.test(`[3.3] TC05 validate that Item ${index} in response has id as number`, function () {\r",
									"        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
									"        pm.expect(item).to.not.be.undefined;\r",
									"    });\r",
									"\r",
									"    pm.test(`[3.3] TC06 validate that Item ${index} in response has email as string`, function () {\r",
									"        pm.expect(item).to.have.property(\"email\").that.is.a(\"string\");\r",
									"    });\r",
									"\r",
									"    pm.test(`[3.3] TC07 validate that Item ${index} in response has firstName as string`, function () {\r",
									"        pm.expect(item).to.have.property(\"firstName\").that.is.a(\"string\");\r",
									"    });\r",
									"\r",
									"    pm.test(`[3.3] TC08 validate that Item ${index} in response has lastName as string `, function () {\r",
									"        pm.expect(item).to.have.property(\"lastName\").that.is.a(\"string\");\r",
									"    });\r",
									"\r",
									"    pm.test(`[3.3] TC09 validate that Item ${index} in response has createdAt as string `, function () {\r",
									"        pm.expect(item).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
									"    });\r",
									"\r",
									"    pm.test(`[3.3] TC10 validate that Item ${index} in response has updatedAt as string `, function () {\r",
									"        pm.expect(item).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
									"    });\r",
									"\r",
									"       pm.test(`[3.3] TC11 validate that Item ${index} in response has householdId as string `, function () {\r",
									"        pm.expect(item).to.have.property(\"householdId\").that.is.a(\"number\");\r",
									"    });\r",
									"\r",
									"     pm.test(`[3.3] TC12 validate that Item ${index} in response has wishlistId as string `, function () {\r",
									"        pm.expect(item).to.have.property(\"wishlistId\").that.is.a(\"number\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve a list of users. The request does not require any parameters in the request body. The response will include an array of user objects, with each object containing the user's email, first name, last name, household ID, creation and update timestamps, wishlist ID, user ID, and links to related resources."
					},
					"response": [
						{
							"name": "3.3 getAllUsersCreated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"3612-ZMrLqXg1COW2uipr6IiW/PfUCI4\""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 18:43:57 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 1,\n        \"createdAt\": \"2021-06-26T20:50:31.944Z\",\n        \"updatedAt\": \"2021-06-26T20:50:31.944Z\",\n        \"wishlistId\": 1,\n        \"id\": 1,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/1\"\n            }\n        ]\n    },\n    {\n        \"email\": \"chip+taylonr@gmail.com\",\n        \"firstName\": \"Chocolate Chip\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 1,\n        \"createdAt\": \"2021-06-26T20:53:02.478Z\",\n        \"updatedAt\": \"2021-06-26T20:53:02.478Z\",\n        \"wishlistId\": 2,\n        \"id\": 2,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/2\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 1,\n        \"createdAt\": \"2021-06-26T21:33:28.578Z\",\n        \"updatedAt\": \"2021-06-26T21:33:28.578Z\",\n        \"wishlistId\": 3,\n        \"id\": 3,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/3\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 1,\n        \"createdAt\": \"2021-06-26T21:33:28.596Z\",\n        \"updatedAt\": \"2021-06-26T21:33:28.596Z\",\n        \"wishlistId\": 4,\n        \"id\": 4,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/4\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 1,\n        \"createdAt\": \"2021-06-26T21:34:19.949Z\",\n        \"updatedAt\": \"2021-06-26T21:34:19.949Z\",\n        \"wishlistId\": 5,\n        \"id\": 5,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/5\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 1,\n        \"createdAt\": \"2021-06-26T21:34:19.966Z\",\n        \"updatedAt\": \"2021-06-26T21:34:19.966Z\",\n        \"wishlistId\": 6,\n        \"id\": 6,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/6\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 6,\n        \"createdAt\": \"2021-06-27T19:02:34.474Z\",\n        \"updatedAt\": \"2021-06-27T19:02:34.474Z\",\n        \"wishlistId\": 7,\n        \"id\": 7,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/7\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 6,\n        \"createdAt\": \"2021-06-27T19:02:34.504Z\",\n        \"updatedAt\": \"2021-06-27T19:02:34.504Z\",\n        \"wishlistId\": 8,\n        \"id\": 8,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/8\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 6,\n        \"createdAt\": \"2021-06-27T19:25:05.658Z\",\n        \"updatedAt\": \"2021-06-27T19:25:05.658Z\",\n        \"wishlistId\": 9,\n        \"id\": 9,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/9\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 6,\n        \"createdAt\": \"2021-06-27T19:27:15.137Z\",\n        \"updatedAt\": \"2021-06-27T19:27:15.137Z\",\n        \"wishlistId\": 10,\n        \"id\": 10,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/10\"\n            }\n        ]\n    },\n    {\n        \"email\": \"charles@mailinator.com\",\n        \"firstName\": \"Charles\",\n        \"lastName\": \"Spurgeon\",\n        \"householdId\": 7,\n        \"createdAt\": \"2021-06-29T23:24:17.944Z\",\n        \"updatedAt\": \"2021-06-29T23:24:17.944Z\",\n        \"wishlistId\": 11,\n        \"id\": 11,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/11\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 7,\n        \"createdAt\": \"2021-06-29T23:24:17.979Z\",\n        \"updatedAt\": \"2021-06-29T23:24:17.979Z\",\n        \"wishlistId\": 12,\n        \"id\": 12,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/12\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 8,\n        \"createdAt\": \"2021-06-29T23:25:54.991Z\",\n        \"updatedAt\": \"2021-06-29T23:25:54.991Z\",\n        \"wishlistId\": 13,\n        \"id\": 13,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/13\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 8,\n        \"createdAt\": \"2021-06-29T23:25:55.024Z\",\n        \"updatedAt\": \"2021-06-29T23:25:55.024Z\",\n        \"wishlistId\": 14,\n        \"id\": 14,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/14\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 9,\n        \"createdAt\": \"2021-06-29T23:27:22.541Z\",\n        \"updatedAt\": \"2021-06-29T23:27:22.541Z\",\n        \"wishlistId\": 15,\n        \"id\": 15,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/15\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 9,\n        \"createdAt\": \"2021-06-29T23:27:22.576Z\",\n        \"updatedAt\": \"2021-06-29T23:27:22.576Z\",\n        \"wishlistId\": 16,\n        \"id\": 16,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/16\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 10,\n        \"createdAt\": \"2021-06-29T23:27:49.888Z\",\n        \"updatedAt\": \"2021-06-29T23:27:49.888Z\",\n        \"wishlistId\": 17,\n        \"id\": 17,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/17\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 10,\n        \"createdAt\": \"2021-06-29T23:27:49.921Z\",\n        \"updatedAt\": \"2021-06-29T23:27:49.921Z\",\n        \"wishlistId\": 18,\n        \"id\": 18,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/18\"\n            }\n        ]\n    },\n    {\n        \"email\": \"charles@mailinator.com\",\n        \"firstName\": \"Charles\",\n        \"lastName\": \"Spurgeon\",\n        \"householdId\": 11,\n        \"createdAt\": \"2021-06-29T23:28:08.460Z\",\n        \"updatedAt\": \"2021-06-29T23:28:08.460Z\",\n        \"wishlistId\": 19,\n        \"id\": 19,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/19\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 11,\n        \"createdAt\": \"2021-06-29T23:28:08.492Z\",\n        \"updatedAt\": \"2021-06-29T23:28:08.492Z\",\n        \"wishlistId\": 20,\n        \"id\": 20,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/20\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 12,\n        \"createdAt\": \"2021-06-29T23:28:17.267Z\",\n        \"updatedAt\": \"2021-06-29T23:28:17.267Z\",\n        \"wishlistId\": 21,\n        \"id\": 21,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/21\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 12,\n        \"createdAt\": \"2021-06-29T23:28:17.301Z\",\n        \"updatedAt\": \"2021-06-29T23:28:17.301Z\",\n        \"wishlistId\": 22,\n        \"id\": 22,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/22\"\n            }\n        ]\n    },\n    {\n        \"email\": \"charles@mailinator.com\",\n        \"firstName\": \"Charles\",\n        \"lastName\": \"Spurgeon\",\n        \"householdId\": 13,\n        \"createdAt\": \"2021-06-29T23:29:10.970Z\",\n        \"updatedAt\": \"2021-06-29T23:29:10.970Z\",\n        \"wishlistId\": 23,\n        \"id\": 23,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/23\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 13,\n        \"createdAt\": \"2021-06-29T23:29:11.012Z\",\n        \"updatedAt\": \"2021-06-29T23:29:11.012Z\",\n        \"wishlistId\": 24,\n        \"id\": 24,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/24\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 14,\n        \"createdAt\": \"2021-06-29T23:31:02.913Z\",\n        \"updatedAt\": \"2021-06-29T23:31:02.913Z\",\n        \"wishlistId\": 25,\n        \"id\": 25,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/25\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 14,\n        \"createdAt\": \"2021-06-29T23:31:02.955Z\",\n        \"updatedAt\": \"2021-06-29T23:31:02.955Z\",\n        \"wishlistId\": 26,\n        \"id\": 26,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/26\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 15,\n        \"createdAt\": \"2021-06-29T23:31:11.806Z\",\n        \"updatedAt\": \"2021-06-29T23:31:11.806Z\",\n        \"wishlistId\": 27,\n        \"id\": 27,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/27\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 15,\n        \"createdAt\": \"2021-06-29T23:31:11.842Z\",\n        \"updatedAt\": \"2021-06-29T23:31:11.842Z\",\n        \"wishlistId\": 28,\n        \"id\": 28,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/28\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 16,\n        \"createdAt\": \"2021-06-29T23:32:12.241Z\",\n        \"updatedAt\": \"2021-06-29T23:32:12.241Z\",\n        \"wishlistId\": 29,\n        \"id\": 29,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/29\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 16,\n        \"createdAt\": \"2021-06-29T23:32:12.282Z\",\n        \"updatedAt\": \"2021-06-29T23:32:12.282Z\",\n        \"wishlistId\": 30,\n        \"id\": 30,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/30\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 17,\n        \"createdAt\": \"2021-06-30T00:23:07.314Z\",\n        \"updatedAt\": \"2021-06-30T00:23:07.314Z\",\n        \"wishlistId\": 31,\n        \"id\": 31,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/31\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 17,\n        \"createdAt\": \"2021-06-30T00:23:07.407Z\",\n        \"updatedAt\": \"2021-06-30T00:23:07.407Z\",\n        \"wishlistId\": 32,\n        \"id\": 32,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/32\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"createdAt\": \"2021-06-30T01:21:35.350Z\",\n        \"updatedAt\": \"2021-06-30T01:21:35.350Z\",\n        \"wishlistId\": 33,\n        \"id\": 33,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/33\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"createdAt\": \"2021-06-30T01:23:19.443Z\",\n        \"updatedAt\": \"2021-06-30T01:23:19.443Z\",\n        \"wishlistId\": 34,\n        \"id\": 34,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/34\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"createdAt\": \"2021-07-01T22:25:45.718Z\",\n        \"updatedAt\": \"2021-07-01T22:25:45.792Z\",\n        \"wishlistId\": 35,\n        \"id\": 35,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/35\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"createdAt\": \"2021-07-01T22:31:49.175Z\",\n        \"updatedAt\": \"2021-07-01T22:31:49.175Z\",\n        \"wishlistId\": 36,\n        \"id\": 36,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/36\"\n            }\n        ]\n    },\n    {\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"createdAt\": \"2025-05-05T18:17:22.375Z\",\n        \"updatedAt\": \"2025-05-05T18:17:22.375Z\",\n        \"id\": 37\n    },\n    {\n        \"firstName\": \"Christop\",\n        \"lastName\": \"Murray\",\n        \"email\": \"Jazlyn.Kunze78@hotmail.com\",\n        \"createdAt\": \"2025-05-05T18:17:55.715Z\",\n        \"updatedAt\": \"2025-05-05T18:17:55.715Z\",\n        \"id\": 38\n    },\n    {\n        \"firstName\": \"Anika\",\n        \"lastName\": \"Wiegand\",\n        \"email\": \"Ford69@hotmail.com\",\n        \"createdAt\": \"2025-05-05T18:19:01.240Z\",\n        \"updatedAt\": \"2025-05-05T18:19:01.240Z\",\n        \"id\": 39\n    },\n    {\n        \"firstName\": \"Cheyenne\",\n        \"lastName\": \"Kirlin\",\n        \"email\": \"Deanna.Nikolaus@hotmail.com\",\n        \"createdAt\": \"2025-05-05T18:25:10.244Z\",\n        \"updatedAt\": \"2025-05-05T18:25:10.244Z\",\n        \"id\": 40\n    },\n    {\n        \"firstName\": \"Lynn\",\n        \"lastName\": \"Bode\",\n        \"email\": \"Bart_Weber2@hotmail.com\",\n        \"createdAt\": \"2025-05-05T18:27:11.878Z\",\n        \"updatedAt\": \"2025-05-05T18:27:11.878Z\",\n        \"id\": 41\n    },\n    {\n        \"firstName\": \"Aimee\",\n        \"lastName\": \"Moen\",\n        \"email\": \"Candido_Harber66@gmail.com\",\n        \"createdAt\": \"2025-05-05T18:33:41.747Z\",\n        \"updatedAt\": \"2025-05-05T18:33:41.747Z\",\n        \"id\": 42\n    }\n]"
						}
					]
				},
				{
					"name": "3.4 updateUserDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"pm.test(\"[3.4] TC01 validate that Status code for updated user request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.4] TC02 validate that response time for updated user request less than 1000ms\" , function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.4] TC03 validate create user response scheme as expected\", function () {\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"firstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"updatedAt\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"firstName\",\r",
									"    \"lastName\",\r",
									"    \"email\",\r",
									"    \"updatedAt\"\r",
									"  ]\r",
									"}\r",
									"\r",
									" pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"//validate data to be as expected\r",
									"pm.test(\"[3.4] TC04 validate that new user firstname in update user response is as expected\", function () {\r",
									"    pm.expect(responseBody.firstName).to.equal(requestBody.firstName);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.4] TC05 validate that new user lastName in updatee user response is as expected\", function () {\r",
									"    pm.expect(responseBody.lastName).to.equal(requestBody.lastName);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.4] TC06 validate that new user mail in update user response is as expected\", function () {\r",
									"    pm.expect(responseBody.email).to.equal(requestBody.email);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.4] TC07 validate that new username firstname in update user response is not null and undefined\", function () {\r",
									"    pm.expect(responseBody.firstName).to.not.be.null;\r",
									"    pm.expect(responseBody.firstName).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[3.4] TC08 validate that new username lastname in update user response is not null and undefined\", function () {\r",
									"    pm.expect(responseBody.lastName).to.not.be.null;\r",
									"    pm.expect(responseBody.lastName).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[3.4] TC09 validate that new username email in update user response is not null and undefined\", function () {\r",
									"    pm.expect(responseBody.email).to.not.be.null;\r",
									"    pm.expect(responseBody.email).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[3.4] TC11 validate that updatedAt is in valid date format\", function () {\r",
									"    pm.expect(responseBody.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"updatedUserFirstName\", responseBody.firstName);\r",
									"pm.collectionVariables.set(\"updatedUserLastName\", responseBody.lastName);\r",
									"pm.collectionVariables.set(\"updatedUserEmail\", responseBody.email);\r",
									"pm.collectionVariables.set(\"updatedUserUpdatedAt\", responseBody.updatedAt);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/{{userIdCreated}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{userIdCreated}}"
							]
						},
						"description": "This endpoint allows updating user information by sending an HTTP PUT request to the specified URL with the user's ID in the path parameter. The request body should be in raw format and include the user's first name, last name, and email.\n\n### Request Body\n\n- `firstName` (string): The user's first name.\n    \n- `lastName` (string): The user's last name.\n    \n- `email` (string): The user's email address.\n    \n\n#### Example Request Body\n\n``` json\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\"\n}\n\n ```\n\n### Response\n\nThe response will include the updated user information, including the first name, last name, email, and the timestamp of the update.\n\n#### Example Response\n\n``` json\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"updatedAt\": \"2022-01-01T12:00:00Z\"\n}\n\n ```"
					},
					"response": [
						{
							"name": "3.4 updateUserDetails",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/{{userIdCreated}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"{{userIdCreated}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "135"
								},
								{
									"key": "ETag",
									"value": "W/\"87-syBWmlYUUBy+Ys/o/pQzVx+5jfc\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 18:50:34 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Ana\",\n    \"lastName\": \"Wisozk\",\n    \"email\": \"Larissa_Rodriguez@hotmail.com\",\n    \"updatedAt\": \"2025-05-05T18:50:34.080Z\"\n}"
						}
					]
				},
				{
					"name": "3.5 getUserDetailsAfterUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"[3.5] TC01 validate that Status code for get user details request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.5] TC02 validate that response time for get user details request less than 1000ms\" , function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[3.5] TC03 validate that user firstname in response matches the same in creating request \", function () {\r",
									"    pm.expect(responseBody.firstName).to.eql(pm.collectionVariables.get(\"updatedUserFirstName\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[3.5] TC04 validate that user lastname in response matches the same in creating request \", function () {\r",
									"    pm.expect(responseBody.lastName).to.eql(pm.collectionVariables.get(\"updatedUserLastName\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[3.5] TC05 validate that user email in response matches the same in creating request \", function () {\r",
									"    pm.expect(responseBody.email).to.eql(pm.collectionVariables.get(\"updatedUserEmail\") );\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[3.5] TC06 validate that user firstname is not null, undefined or empty in get user request \", function () {\r",
									"    pm.expect(responseBody.firstName).to.not.be.null;\r",
									"    pm.expect(responseBody.firstName).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[3.5] TC06 validate that user lastname is not null, undefined or empty in get user request\", function () {\r",
									"    pm.expect(responseBody.lastName).to.not.be.null;\r",
									"    pm.expect(responseBody.lastName).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[3.5] TC07 validate that user createdAt is not null, undefined or empty in get user request\", function () {\r",
									"    pm.expect(responseBody.createdAt).to.not.be.null;\r",
									"    pm.expect(responseBody.createdAt).to.not.be.undefined;\r",
									"    pm.expect(responseBody.createdAt).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[3.5] TC08 validate that user updateAt is not null, undefined or empty in get user request\", function () {\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.null;\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.undefined;\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[3.5] TC09 validate that get user response has all required fields\", function () {\r",
									"    pm.expect(responseBody).to.have.all.keys(\"firstName\", \"lastName\", \"email\", \"createdAt\", \"updatedAt\", \"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"[3.5] TC10 validate that get user response has correct data types\", function () {\r",
									"    pm.expect(responseBody.firstName).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.lastName).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.email).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/users/{{userIdCreated}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{userIdCreated}}"
							]
						},
						"description": "This endpoint retrieves user information based on the provided user ID.\n\n### Request\n\nNo request body is required for this endpoint. The user ID is specified as a path parameter in the URL.\n\n- `userIdCreated` (path parameter) : The unique identifier of the user for whom the information is being retrieved.\n    \n\n### Response\n\nThe response will include the following user details:\n\n- `firstName` : The first name of the user.\n    \n- `lastName` : The last name of the user.\n    \n- `email` : The email address of the user.\n    \n- `createdAt` : The timestamp indicating when the user was created.\n    \n- `updatedAt` : The timestamp indicating when the user information was last updated.\n    \n- `id` : The unique identifier of the user.\n    \n\nPlease note that the actual values for the user details will be populated in the response."
					},
					"response": [
						{
							"name": "3.5 getUserDetailsAfterUpdate",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/users/{{userIdCreated}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"{{userIdCreated}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "185"
								},
								{
									"key": "ETag",
									"value": "W/\"b9-4IAgqnL8bovbMaPBIbGoNIhcEbE\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 19:06:35 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Percival\",\n    \"lastName\": \"Bayer\",\n    \"email\": \"Rachelle33@gmail.com\",\n    \"createdAt\": \"2025-05-05T19:06:21.229Z\",\n    \"updatedAt\": \"2025-05-05T19:06:28.809Z\",\n    \"id\": 43\n}"
						}
					]
				},
				{
					"name": "3.6 partialUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[3.6] TC01 validate that Status code for partial update for user request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/{{userIdCreated}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{userIdCreated}}"
							]
						},
						"description": "This endpoint makes an HTTP PATCH request to update user information at the specified URL. The request body should contain the new values for the user's first name, last name, and email.\n\n### Request Body\n\n- firstName (string, required): The new first name of the user.\n    \n- lastName (string, required): The new last name of the user.\n    \n- email (string, required): The new email address of the user.\n    \n\n### Response\n\nThe response for this request is a JSON object with the following properties:\n\n- firstName (string): The first name of the user after the update.\n    \n- lastName (string): The last name of the user after the update.\n    \n- email (string): The email address of the user after the update.\n    \n- createdAt (string): The timestamp when the user was created.\n    \n- updatedAt (string): The timestamp when the user was last updated.\n    \n- id (integer): The unique identifier of the user.\n    \n\n### JSON Schema\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"firstName\": { \"type\": \"string\" },\n    \"lastName\": { \"type\": \"string\" },\n    \"email\": { \"type\": \"string\" },\n    \"createdAt\": { \"type\": \"string\" },\n    \"updatedAt\": { \"type\": \"string\" },\n    \"id\": { \"type\": \"integer\" }\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "3.6 partialUpdate",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/{{userIdCreated}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"{{userIdCreated}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "181"
								},
								{
									"key": "ETag",
									"value": "W/\"b5-BSLluP9n5l5nhQmWsP/lZ4YQEAA\""
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 15:51:14 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Brice\",\n    \"lastName\": \"Wiegand\",\n    \"email\": \"Flo66@hotmail.com\",\n    \"createdAt\": \"2025-05-07T15:51:10.086Z\",\n    \"updatedAt\": \"2025-05-07T15:51:10.086Z\",\n    \"id\": 45\n}"
						}
					]
				},
				{
					"name": "3.6 deleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[3.6] TC01 validate that Status code is 204 for delete user request\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/users/{{userIdCreated}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{userIdCreated}}"
							]
						},
						"description": "### Delete User\n\nThis endpoint is used to delete a specific user.\n\n#### Request Parameters\n\n- `userIdCreated` (path parameter) - The ID of the user to be deleted.\n    \n\n#### Response\n\nThe response will not contain a message body. If the user is successfully deleted, the response will return a 204 No Content status code. If the user ID is not found, the response will return a 404 Not Found status code."
					},
					"response": [
						{
							"name": "3.6 deleteUser",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/users/{{userIdCreated}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"{{userIdCreated}}"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 19:03:35 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "3.7 getUserDetailAfterDelete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"3.7] TC01 validate that Status code is 404 for get user details after delete\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/users/{{userIdCreated}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{userIdCreated}}"
							]
						},
						"description": "This endpoint retrieves information about a specific user by making an HTTP GET request to the provided URL. The request should include the user ID in the URL path to specify which user's information is being requested.\n\n### Request\n\n- Path Parameters\n    \n    - `userIdCreated`: The ID of the user for whom the information is being requested.\n        \n\n### Response\n\nUpon a successful request, the API will respond with the user's details, including their name, email, and any other relevant information."
					},
					"response": [
						{
							"name": "3.7 getUserDetailAfterDelete",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/users/{{userIdCreated}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"{{userIdCreated}}"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "33"
								},
								{
									"key": "ETag",
									"value": "W/\"21-ZGVnntUV23OO3IYyawjFZsL32fI\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 19:05:19 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"User not found\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "4- Wishlists",
			"item": [
				{
					"name": "4.1 createNewWishlist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomWishlistName() {\r",
									"    const adjectives = [\"Dreamy\", \"Lovely\", \"Awesome\", \"Magical\", \"Cozy\", \"Epic\", \"Golden\", \"Secret\", \"Wanderlust\", \"Sparkling\"];\r",
									"    const nouns = [\"Wishlist\", \"List\", \"Collection\", \"Vault\", \"Basket\", \"Bundle\", \"Box\", \"Catalog\", \"Crate\", \"Corner\"];\r",
									"\r",
									"    const randomAdj = adjectives[Math.floor(Math.random() * adjectives.length)];\r",
									"    const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];\r",
									"    const randomNumber = Math.floor(Math.random() * 10000); // 0 to 9999\r",
									"\r",
									"    return `${randomAdj}${randomNoun}${randomNumber}`;\r",
									"}\r",
									"\r",
									"var randomWishListName = generateRandomWishlistName();\r",
									"pm.collectionVariables.set(\"randomWishListName\",randomWishListName);\r",
									"\r",
									"//////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"function generateRandomBookTitles(count = 5) {\r",
									"    const titles = [\r",
									"        \"The Lost World\", \"Invisible Light\", \"Chasing Dreams\", \"Echoes of Silence\",\r",
									"        \"Beyond the Horizon\", \"Whispers in the Dark\", \"Time Travelers\",\r",
									"        \"The Forgotten City\", \"Sky of Ashes\", \"Paths Untaken\"\r",
									"    ];\r",
									"\r",
									"    const books = [];\r",
									"\r",
									"    for (let i = 0; i < count; i++) {\r",
									"        const randomTitle = titles[Math.floor(Math.random() * titles.length)];\r",
									"        books.push(randomTitle);\r",
									"    }\r",
									"\r",
									"    return books;\r",
									"}\r",
									"\r",
									"\r",
									"var randomBooksArray = generateRandomBookTitles();\r",
									"pm.collectionVariables.set(\"randomBooksArray\",randomBooksArray);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"pm.test(\"[4.1] TC01 validate that Status code for create new wishlist request is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"[4.1] TC02 validate that response time for create new wishlist request less than 1000ms\" , function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"[4.1] TC03 validate create user response scheme as expected\", function () {\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"books\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"createdAt\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"updatedAt\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"name\",\r",
									"    \"books\",\r",
									"    \"createdAt\",\r",
									"    \"updatedAt\",\r",
									"    \"id\"\r",
									"  ]\r",
									"}\r",
									" pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"//validate data to be as expected\r",
									"pm.test(\"[4.1] TC04 validate that new wishlist name in create new wishlist response is as expected\", function () {\r",
									"    pm.expect(responseBody.name).to.equal(requestBody.name);\r",
									"});\r",
									"\r",
									"pm.test(\"[4.1] TC05 validate that new wishlist books in create new wishlist response is as expected\", function () {\r",
									"    pm.expect(responseBody.books).to.equal(requestBody.books);\r",
									"});\r",
									"\r",
									"pm.test(\"[4.1] TC06 validate that new wishlist name in create wishlist response is not null and undefined\", function () {\r",
									"    pm.expect(responseBody.name).to.not.be.null;\r",
									"    pm.expect(responseBody.name).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[4.1] TC07 validate that new wishlist books in create wishlist response is not null and undefined\", function () {\r",
									"    pm.expect(responseBody.books).to.not.be.null;\r",
									"    pm.expect(responseBody.books).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[4.1] TC08 validate that createdAt is in valid date format\", function () {\r",
									"    pm.expect(responseBody.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									"pm.test(\"[4.1] TC09 validate that updatedAt is in valid date format\", function () {\r",
									"    pm.expect(responseBody.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"wishlistName\", responseBody.name);\r",
									"pm.collectionVariables.set(\"wishlistBooks\", responseBody.books);\r",
									"pm.collectionVariables.set(\"wishlistCreatedAt\", responseBody.updatedAt);\r",
									"pm.collectionVariables.set(\"wishlistUpdatedAt\", responseBody.updatedAt);\r",
									"pm.collectionVariables.set(\"wishlistID\", responseBody.id);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{randomWishListName}}\",\r\n    \"books\": \"[{{randomBooksArray}}]\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/wishlists",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"wishlists"
							]
						},
						"description": "### Create Wishlist\n\nThis endpoint allows the client to create a new wishlist by providing a name and a list of books.\n\n**Request Body**\n\n- `name` (string, required): The name of the wishlist.\n    \n- `books` (array, required): An array of books to be added to the wishlist.\n    \n\nExample:\n\n``` json\n{\n  \"name\": \"{{randomWishListName}}\",\n  \"books\": [{{randomBooksArray}}]\n}\n\n ```\n\n**Response**  \nThe response will be a JSON object with the following properties:\n\n- `name` (string): The name of the wishlist.\n    \n- `books` (string): The list of books in the wishlist.\n    \n- `createdAt` (string): The timestamp when the wishlist was created.\n    \n- `updatedAt` (string): The timestamp when the wishlist was last updated.\n    \n- `id` (integer): The unique identifier of the wishlist.\n    \n\n**JSON Schema**\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\"type\": \"string\"},\n    \"books\": {\"type\": \"string\"},\n    \"createdAt\": {\"type\": \"string\"},\n    \"updatedAt\": {\"type\": \"string\"},\n    \"id\": {\"type\": \"integer\"}\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "4.1 createNewWishlist",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{randomWishListName}}\",\r\n    \"books\": \"[{{randomBooksArray}}]\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/wishlists",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"wishlists"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "229"
								},
								{
									"key": "ETag",
									"value": "W/\"e5-AhGPbUbDA3fDqLQTI/haMs4VQqM\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 19:16:56 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"DreamyCatalog7185\",\n    \"books\": \"[Sky of Ashes,Whispers in the Dark,The Forgotten City,Invisible Light,Sky of Ashes]\",\n    \"createdAt\": \"2025-05-05T19:16:56.545Z\",\n    \"updatedAt\": \"2025-05-05T19:16:56.545Z\",\n    \"id\": 42\n}"
						}
					]
				},
				{
					"name": "4.2 getWishlistByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"[4.2] TC01 validate that Status code for get whishlist details request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[4.2] TC02 validate that response time for get whishlist details request less than 1000ms\" , function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[4.2] TC03 validate that whishlist name in response matches the same in creating request \", function () {\r",
									"    pm.expect(responseBody.name).to.eql(pm.collectionVariables.get(\"wishlistName\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[4.2] TC04 validate that user books in response matches the same in creating request \", function () {\r",
									"    pm.expect(responseBody.books).to.eql(pm.collectionVariables.get(\"wishlistBooks\") );\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[4.2] TC06 validate that whishlist name is not null, undefined or empty in get user request \", function () {\r",
									"    pm.expect(responseBody.name).to.not.be.null;\r",
									"    pm.expect(responseBody.name).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[4.2] TC06 validate that whishlist books is not null, undefined or empty in get user request\", function () {\r",
									"    pm.expect(responseBody.books).to.not.be.null;\r",
									"    pm.expect(responseBody.books).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[4.2] TC07 validate that whishlist createdAt is not null, undefined or empty in get user request\", function () {\r",
									"    pm.expect(responseBody.createdAt).to.not.be.null;\r",
									"    pm.expect(responseBody.createdAt).to.not.be.undefined;\r",
									"    pm.expect(responseBody.createdAt).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[4.2] TC08 validate that whishlist updateAt is not null, undefined or empty in get user request\", function () {\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.null;\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.undefined;\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[4.2] TC09 validate that get whishlist response has all required fields\", function () {\r",
									"    pm.expect(responseBody).to.have.all.keys(\"name\", \"books\", \"createdAt\", \"updatedAt\", \"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"[4.2] TC10 validate that get whishlist details response has correct data types\", function () {\r",
									"    pm.expect(responseBody.name).to.be.a(\"string\");\r",
									"    //pm.expect(responseBody.books).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/wishlists/{{wishlistID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"wishlists",
								"{{wishlistID}}"
							]
						},
						"description": "This endpoint retrieves the details of a specific wishlist identified by the provided wishlistID.\n\n### Request\n\n- Method: GET\n    \n- URL: {{baseURL}}/wishlists/{{wishlistID}}\n    \n\n### Response\n\nThe response will include the following details about the wishlist:\n\n- `name` (string): The name of the wishlist.\n    \n- `books` (string): The list of books in the wishlist.\n    \n- `createdAt` (string): The timestamp when the wishlist was created.\n    \n- `updatedAt` (string): The timestamp when the wishlist was last updated.\n    \n- `id` (integer): The unique identifier of the wishlist."
					},
					"response": [
						{
							"name": "4.2 getWishlistByID",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/wishlists/{{wishlistID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"wishlists",
										"{{wishlistID}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "233"
								},
								{
									"key": "ETag",
									"value": "W/\"e9-GK1LBuunDdljDQH797u9bcj0N+k\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 19:25:34 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"WanderlustBox1563\",\n    \"books\": \"[Chasing Dreams,Whispers in the Dark,Time Travelers,Paths Untaken,Whispers in the Dark]\",\n    \"createdAt\": \"2025-05-05T19:25:30.281Z\",\n    \"updatedAt\": \"2025-05-05T19:25:30.281Z\",\n    \"id\": 44\n}"
						}
					]
				},
				{
					"name": "4.3 getAllWishListCreated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"[4.3] TC01 vaidate that status code for get all wishlist details request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[4.3] TC02 validate that response time for get all wishlist details request is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"[4.3] TC03 validate that Response for get all wishlist details request is an array\", function () {\r",
									"    pm.expect(responseBody).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"[4.3] TC04 validate that Response for get all wishlist details request is not empty\", function () {\r",
									"    pm.expect(responseBody).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"// validate that first two object have schema as expected\r",
									"responseBody.slice(0, 2).forEach((item, index) => {\r",
									"    pm.test(`[4.3] TC05 validate that Item ${index} in response has id as number`, function () {\r",
									"        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
									"        pm.expect(item).to.not.be.undefined;\r",
									"    });\r",
									"\r",
									"    pm.test(`[4.3] TC06 validate that Item ${index} in response has email as string`, function () {\r",
									"        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
									"    });\r",
									"\r",
									"    pm.test(`[4.3] TC07 validate that Item ${index} in response has books as array`, function () {\r",
									"        pm.expect(item).to.have.property(\"books\").that.is.a(\"array\");\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/wishlists",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"wishlists"
							]
						},
						"description": "### Get Wishlists\n\nThis endpoint retrieves a list of wishlists.\n\n#### Request\n\n- Method: GET\n    \n- URL: `{{baseURL}}/wishlists`\n    \n\n#### Response\n\nThe response for this request is a JSON array containing wishlist objects. Each wishlist object has the following properties:\n\n- `name` (string): The name of the wishlist.\n    \n- `books` (array): An array of book IDs included in the wishlist.\n    \n- `id` (number): The unique identifier of the wishlist.\n    \n\nExample response body:\n\n``` json\n[\n    {\n        \"name\": \"\",\n        \"books\": [0],\n        \"id\": 0\n    }\n]\n\n ```\n\n#### JSON Schema\n\n``` json\n[\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"name\": {\n                \"type\": \"string\"\n            },\n            \"books\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"number\"\n                }\n            },\n            \"id\": {\n                \"type\": \"number\"\n            }\n        }\n    }\n]\n\n ```"
					},
					"response": [
						{
							"name": "4.3 getAllWishListCreated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/wishlists",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"wishlists"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"10f6-lLxmoBdi2BrBteEdr+mE1d1D4mU\""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 19:36:13 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [\n            1\n        ],\n        \"id\": 1\n    },\n    {\n        \"name\": \"Chocolate Chip's List\",\n        \"books\": [\n            2\n        ],\n        \"id\": 2\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 3\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 4\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 5\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 6\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [\n            1\n        ],\n        \"id\": 7\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [\n            2\n        ],\n        \"id\": 8\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 9\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 10\n    },\n    {\n        \"name\": \"Charles's List\",\n        \"books\": [],\n        \"id\": 11\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [],\n        \"id\": 12\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [],\n        \"id\": 13\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [],\n        \"id\": 14\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [],\n        \"id\": 15\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 16\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 17\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [\n            27\n        ],\n        \"id\": 18\n    },\n    {\n        \"name\": \"Charles's List\",\n        \"books\": [\n            6\n        ],\n        \"id\": 19\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 20\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [\n            10\n        ],\n        \"id\": 21\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [],\n        \"id\": 22\n    },\n    {\n        \"name\": \"Charles's List\",\n        \"books\": [],\n        \"id\": 23\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [\n            27\n        ],\n        \"id\": 24\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [],\n        \"id\": 25\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [\n            9\n        ],\n        \"id\": 26\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [\n            1\n        ],\n        \"id\": 27\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [],\n        \"id\": 28\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [\n            13,\n            25,\n            7\n        ],\n        \"id\": 29\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [\n            13\n        ],\n        \"id\": 30\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [\n            23,\n            5,\n            8\n        ],\n        \"id\": 31\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [\n            16\n        ],\n        \"id\": 32\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 33\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 34\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 35\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 36\n    },\n    {\n        \"name\": \"Wishlist Name\",\n        \"books\": [],\n        \"createdAt\": \"2025-05-05T19:09:33.886Z\",\n        \"updatedAt\": \"2025-05-05T19:09:33.886Z\",\n        \"id\": 37\n    },\n    {\n        \"name\": \"{{randomWishListName}}\",\n        \"books\": [],\n        \"createdAt\": \"2025-05-05T19:15:21.647Z\",\n        \"updatedAt\": \"2025-05-05T19:15:21.647Z\",\n        \"id\": 38\n    },\n    {\n        \"name\": \"LovelyCrate497\",\n        \"books\": [],\n        \"createdAt\": \"2025-05-05T19:16:10.099Z\",\n        \"updatedAt\": \"2025-05-05T19:16:10.099Z\",\n        \"id\": 39\n    },\n    {\n        \"name\": \"GoldenCatalog2160\",\n        \"books\": \"The Lost World,The Lost World,Invisible Light,Beyond the Horizon,The Lost World\",\n        \"createdAt\": \"2025-05-05T19:16:27.320Z\",\n        \"updatedAt\": \"2025-05-05T19:16:27.320Z\",\n        \"id\": 40\n    },\n    {\n        \"name\": \"GoldenBox1198\",\n        \"books\": \"[The Forgotten City,Sky of Ashes,Invisible Light,Invisible Light,The Forgotten City]\",\n        \"createdAt\": \"2025-05-05T19:16:40.689Z\",\n        \"updatedAt\": \"2025-05-05T19:16:40.689Z\",\n        \"id\": 41\n    },\n    {\n        \"name\": \"DreamyCatalog7185\",\n        \"books\": \"[Sky of Ashes,Whispers in the Dark,The Forgotten City,Invisible Light,Sky of Ashes]\",\n        \"createdAt\": \"2025-05-05T19:16:56.545Z\",\n        \"updatedAt\": \"2025-05-05T19:16:56.545Z\",\n        \"id\": 42\n    },\n    {\n        \"name\": \"DreamyBasket5774\",\n        \"books\": \"[Paths Untaken,Chasing Dreams,Invisible Light,Invisible Light,Invisible Light]\",\n        \"createdAt\": \"2025-05-05T19:24:22.402Z\",\n        \"updatedAt\": \"2025-05-05T19:24:22.403Z\",\n        \"id\": 43\n    },\n    {\n        \"name\": \"WanderlustBox1563\",\n        \"books\": \"[Chasing Dreams,Whispers in the Dark,Time Travelers,Paths Untaken,Whispers in the Dark]\",\n        \"createdAt\": \"2025-05-05T19:25:30.281Z\",\n        \"updatedAt\": \"2025-05-05T19:25:30.281Z\",\n        \"id\": 44\n    }\n]"
						}
					]
				},
				{
					"name": "4.4 updateWishlistByID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomWishlistName() {\r",
									"    const adjectives = [\"Dreamy\", \"Lovely\", \"Awesome\", \"Magical\", \"Cozy\", \"Epic\", \"Golden\", \"Secret\", \"Wanderlust\", \"Sparkling\"];\r",
									"    const nouns = [\"Wishlist\", \"List\", \"Collection\", \"Vault\", \"Basket\", \"Bundle\", \"Box\", \"Catalog\", \"Crate\", \"Corner\"];\r",
									"\r",
									"    const randomAdj = adjectives[Math.floor(Math.random() * adjectives.length)];\r",
									"    const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];\r",
									"    const randomNumber = Math.floor(Math.random() * 10000); // 0 to 9999\r",
									"\r",
									"    return `${randomAdj}${randomNoun}${randomNumber}`;\r",
									"}\r",
									"\r",
									"var updatedRandomWishListName = generateRandomWishlistName();\r",
									"//pm.collectionVariables.set(\"updatedRandomWishListName\",updatedRandomWishListName);\r",
									"\r",
									"//////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"function generateRandomBookTitles(count = 5) {\r",
									"    const titles = [\r",
									"        \"The Lost World\", \"Invisible Light\", \"Chasing Dreams\", \"Echoes of Silence\",\r",
									"        \"Beyond the Horizon\", \"Whispers in the Dark\", \"Time Travelers\",\r",
									"        \"The Forgotten City\", \"Sky of Ashes\", \"Paths Untaken\"\r",
									"    ];\r",
									"\r",
									"    const books = [];\r",
									"\r",
									"    for (let i = 0; i < count; i++) {\r",
									"        const randomTitle = titles[Math.floor(Math.random() * titles.length)];\r",
									"        books.push(randomTitle);\r",
									"    }\r",
									"\r",
									"    return books;\r",
									"}\r",
									"\r",
									"\r",
									"var updatedRandomBooksArray = generateRandomBookTitles();\r",
									"//pm.collectionVariables.set(\"updatedRandomBooksArray\",updatedRandomBooksArray);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"pm.test(\"[4.4] TC01 validate that Status code for create new wishlist request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[4.4] TC02 validate that response time for create new wishlist request less than 1000ms\" , function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"[4.4] TC03 validate create user response scheme as expected\", function () {\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"books\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"createdAt\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"updatedAt\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"name\",\r",
									"    \"books\",\r",
									"    \"createdAt\",\r",
									"    \"updatedAt\",\r",
									"    \"id\"\r",
									"  ]\r",
									"}\r",
									" pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"//validate data to be as expected\r",
									"pm.test(\"[4.4] TC04 validate that updated wishlist name in create update wishlist response is as expected\", function () {\r",
									"    pm.expect(responseBody.name).to.equal(requestBody.name);\r",
									"});\r",
									"\r",
									"pm.test(\"[4.4] TC05 validate that updated wishlist books in create update wishlist response is as expected\", function () {\r",
									"    pm.expect(responseBody.books).to.equal(requestBody.books);\r",
									"});\r",
									"\r",
									"pm.test(\"[4.4] TC06 validate that new wishlist name in create wishlist response is not null and undefined\", function () {\r",
									"    pm.expect(responseBody.name).to.not.be.null;\r",
									"    pm.expect(responseBody.name).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[4.4] TC07 validate that new wishlist books in create wishlist response is not null and undefined\", function () {\r",
									"    pm.expect(responseBody.books).to.not.be.null;\r",
									"    pm.expect(responseBody.books).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[4.4] TC08 validate that createdAt is in valid date format\", function () {\r",
									"    pm.expect(responseBody.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									"pm.test(\"[4.4] TC09 validate that updatedAt is in valid date format\", function () {\r",
									"    pm.expect(responseBody.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"updatedWishlistName\", responseBody.name);\r",
									"pm.collectionVariables.set(\"updatedWishlistBooks\", responseBody.books);\r",
									"pm.collectionVariables.set(\"updatedWishlistCreatedAt\", responseBody.updatedAt);\r",
									"pm.collectionVariables.set(\"updatedWishlistUpdatedAt\", responseBody.updatedAt);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{updatedRandomWishListName}}\",\r\n    \"books\": \"[{{updatedRandomBooksArray}}]\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/wishlists/{{wishlistID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"wishlists",
								"{{wishlistID}}"
							]
						},
						"description": "The `PUT` request is used to update a specific wishlist identified by `wishlistID` in the system. The request should include a JSON payload with the updated `name` and `books` for the wishlist.\n\n### Request Body\n\n- `name`: (string) The updated name for the wishlist.\n    \n- `books`: (array) An array of updated book items for the wishlist.\n    \n\n### Response\n\nThe response will include the updated details of the wishlist, such as:\n\n- `name`: The updated name of the wishlist.\n    \n- `books`: The updated list of books in the wishlist.\n    \n- `createdAt`: The timestamp when the wishlist was created.\n    \n- `updatedAt`: The timestamp when the wishlist was last updated.\n    \n- `id`: The unique identifier of the wishlist."
					},
					"response": [
						{
							"name": "4.4 updateWishlistByID",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{randomWishListName}}\",\r\n    \"books\": \"[{{randomBooksArray}}]\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/wishlists/{{wishlistID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"wishlists",
										"{{wishlistID}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "228"
								},
								{
									"key": "ETag",
									"value": "W/\"e4-MxGjVxBEgQBPz8a+/PWSl/DJ9mg\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 19:41:26 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"CozyBundle138\",\n    \"books\": \"[Sky of Ashes,Beyond the Horizon,Sky of Ashes,Whispers in the Dark,The Forgotten City]\",\n    \"createdAt\": \"2025-05-05T19:41:21.138Z\",\n    \"updatedAt\": \"2025-05-05T19:41:21.138Z\",\n    \"id\": 45\n}"
						}
					]
				},
				{
					"name": "4.5 getWishlistAfterUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"[4.5] TC01 validate that Status code for get whishlist details request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[4.5] TC02 validate that response time for get whishlist details request less than 1000ms\" , function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[4.5] TC03 validate that whishlist name in response matches the same in creating request \", function () {\r",
									"    pm.expect(responseBody.name).to.eql(pm.collectionVariables.get(\"updatedWishlistName\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[4.5] TC04 validate that  whishlist books  in response matches the same in creating request \", function () {\r",
									"    pm.expect(responseBody.books).to.eql(pm.collectionVariables.get(\"updatedWishlistBooks\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[4.5] TC05 validate that  whishlist updatedAt  in response matches the same in creating request \", function () {\r",
									"    pm.expect(responseBody.updatedAt).to.eql(pm.collectionVariables.get(\"updatedWishlistUpdatedAt\") );\r",
									"});\r",
									"\r",
									"pm.test(\"[4.5] TC06 validate that whishlist name is not null, undefined or empty in get user request \", function () {\r",
									"    pm.expect(responseBody.name).to.not.be.null;\r",
									"    pm.expect(responseBody.name).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[4.5] TC07 validate that whishlist books is not null, undefined or empty in get user request\", function () {\r",
									"    pm.expect(responseBody.books).to.not.be.null;\r",
									"    pm.expect(responseBody.books).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[4.5] TC08 validate that whishlist createdAt is not null, undefined or empty in get user request\", function () {\r",
									"    pm.expect(responseBody.createdAt).to.not.be.null;\r",
									"    pm.expect(responseBody.createdAt).to.not.be.undefined;\r",
									"    pm.expect(responseBody.createdAt).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[4.5] TC09 validate that whishlist updateAt is not null, undefined or empty in get user request\", function () {\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.null;\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.undefined;\r",
									"    pm.expect(responseBody.updatedAt).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[4.5] TC10 validate that get whishlist response has all required fields\", function () {\r",
									"    pm.expect(responseBody).to.have.all.keys(\"name\", \"books\", \"createdAt\", \"updatedAt\", \"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"[4.5] TC11 validate that get whishlist details response has correct data types\", function () {\r",
									"    pm.expect(responseBody.name).to.be.a(\"string\");\r",
									"    //pm.expect(responseBody.books).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/wishlists/{{wishlistID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"wishlists",
								"{{wishlistID}}"
							]
						},
						"description": "### Get Wishlist Details\n\nThis endpoint retrieves the details of a specific wishlist.\n\n#### Request\n\n- Method: GET\n    \n- URL: `{{baseURL}}/wishlists/{{wishlistID}}`\n    \n\n#### Response\n\nThe response for this request can be described using the following JSON schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": { \"type\": \"string\" },\n    \"books\": { \"type\": \"string\" },\n    \"createdAt\": { \"type\": \"string\" },\n    \"updatedAt\": { \"type\": \"string\" },\n    \"id\": { \"type\": \"integer\" }\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "4.5 getWishlistAfterUpdate",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/wishlists/{{wishlistID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"wishlists",
										"{{wishlistID}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "227"
								},
								{
									"key": "ETag",
									"value": "W/\"e3-YiTDmvVpFN9L+tMucTb0MOymX2U\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 19:59:38 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"AwesomeBox6278\",\n    \"books\": \"[Echoes of Silence,Sky of Ashes,The Forgotten City,Chasing Dreams,Echoes of Silence]\",\n    \"createdAt\": \"2025-05-05T19:45:51.241Z\",\n    \"updatedAt\": \"2025-05-05T19:54:41.536Z\",\n    \"id\": 47\n}"
						}
					]
				},
				{
					"name": "4.5 partialUpdate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomWishlistName() {\r",
									"    const adjectives = [\"Dreamy\", \"Lovely\", \"Awesome\", \"Magical\", \"Cozy\", \"Epic\", \"Golden\", \"Secret\", \"Wanderlust\", \"Sparkling\"];\r",
									"    const nouns = [\"Wishlist\", \"List\", \"Collection\", \"Vault\", \"Basket\", \"Bundle\", \"Box\", \"Catalog\", \"Crate\", \"Corner\"];\r",
									"\r",
									"    const randomAdj = adjectives[Math.floor(Math.random() * adjectives.length)];\r",
									"    const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];\r",
									"    const randomNumber = Math.floor(Math.random() * 10000); // 0 to 9999\r",
									"\r",
									"    return `${randomAdj}${randomNoun}${randomNumber}`;\r",
									"}\r",
									"\r",
									"var updatedRandomWishListName = generateRandomWishlistName();\r",
									"//pm.collectionVariables.set(\"updatedRandomWishListName\",updatedRandomWishListName);\r",
									"\r",
									"//////////////////////////////////////////////////////////////////////////\r",
									"\r",
									"function generateRandomBookTitles(count = 5) {\r",
									"    const titles = [\r",
									"        \"The Lost World\", \"Invisible Light\", \"Chasing Dreams\", \"Echoes of Silence\",\r",
									"        \"Beyond the Horizon\", \"Whispers in the Dark\", \"Time Travelers\",\r",
									"        \"The Forgotten City\", \"Sky of Ashes\", \"Paths Untaken\"\r",
									"    ];\r",
									"\r",
									"    const books = [];\r",
									"\r",
									"    for (let i = 0; i < count; i++) {\r",
									"        const randomTitle = titles[Math.floor(Math.random() * titles.length)];\r",
									"        books.push(randomTitle);\r",
									"    }\r",
									"\r",
									"    return books;\r",
									"}\r",
									"\r",
									"\r",
									"var updatedRandomBooksArray = generateRandomBookTitles();\r",
									"//pm.collectionVariables.set(\"updatedRandomBooksArray\",updatedRandomBooksArray);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[4.5] TC01 validate that Status code is 200 for partial update wishlist request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{updatedRandomWishListName}}\",\r\n    \"books\": \"[{{updatedRandomBooksArray}}]\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/wishlists/{{wishlistID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"wishlists",
								"{{wishlistID}}"
							]
						},
						"description": "### Update Wishlist\n\nThis endpoint is used to update a specific wishlist by providing the wishlist ID and the updated wishlist details.\n\n#### Request\n\n- Method: PATCH\n    \n- URL: `{{baseURL}}/wishlists/{{wishlistID}}`\n    \n- Headers:\n    \n    - Content-Type: application/json\n        \n- Body:\n    \n    - name (string, required): The updated name of the wishlist.\n        \n    - books (array, required): An array of updated book details.\n        \n\n#### Response\n\nThe response for this request can be represented by the following JSON schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\"type\": \"string\"},\n    \"books\": {\"type\": \"string\"},\n    \"createdAt\": {\"type\": \"string\"},\n    \"updatedAt\": {\"type\": \"string\"},\n    \"id\": {\"type\": \"integer\"}\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "2.6 partialUpdate",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{updatedRandomWishListName}}\",\r\n    \"books\": \"[{{updatedRandomBooksArray}}]\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/wishlists/{{wishlistID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"wishlists",
										"{{wishlistID}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "227"
								},
								{
									"key": "ETag",
									"value": "W/\"e3-U3pFjVUgXKlqZ2ntygFUHq7eahY\""
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 15:56:02 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"AwesomeBox6278\",\n    \"books\": \"[Echoes of Silence,Sky of Ashes,The Forgotten City,Chasing Dreams,Echoes of Silence]\",\n    \"createdAt\": \"2025-05-07T15:55:59.037Z\",\n    \"updatedAt\": \"2025-05-07T15:55:59.037Z\",\n    \"id\": 48\n}"
						}
					]
				},
				{
					"name": "4.6 deleteWishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[4.6] TC01 validate that Status code is 204 for delete user request\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/wishlists/{{wishlistID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"wishlists",
								"{{wishlistID}}"
							]
						},
						"description": "### Delete Wishlist\n\nThis endpoint is used to delete a specific wishlist.\n\n#### Request\n\n- Method: DELETE\n    \n- URL: `{{baseURL}}/wishlists/{{wishlistID}}`\n    \n\n#### Response\n\nThe response for this request will be a JSON schema. The schema will define the structure of the response body returned upon successful deletion of the wishlist."
					},
					"response": [
						{
							"name": "4.6 deleteWishlist",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/wishlists/{{wishlistID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"wishlists",
										"{{wishlistID}}"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 20:04:36 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "4.5 getWishlistAfterDelete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"4.7] TC01 validate that Status code is 404 for get whishlist details after delete\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/wishlists/{{wishlistID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"wishlists",
								"{{wishlistID}}"
							]
						},
						"description": "# Get Wishlist Details\n\nThis endpoint retrieves the details of a specific wishlist.\n\n## Request\n\n### Request Parameters\n\n- `wishlistID` (path parameter) : The ID of the wishlist for which details are to be retrieved.\n    \n\n### Response\n\nThe response will be a JSON object with the following properties:\n\n- `wishlistID` : The ID of the wishlist.\n    \n- `name` : The name of the wishlist.\n    \n- `items` : An array of items in the wishlist, each containing:\n    \n    - `itemID` : The ID of the item.\n        \n    - `name` : The name of the item.\n        \n    - `quantity` : The quantity of the item in the wishlist.\n        \n\nExample:\n\n``` json\n{\n  \"wishlistID\": \"123\",\n  \"name\": \"Birthday Wishlist\",\n  \"items\": [\n    {\n      \"itemID\": \"456\",\n      \"name\": \"Smartphone\",\n      \"quantity\": 1\n    },\n    {\n      \"itemID\": \"789\",\n      \"name\": \"Headphones\",\n      \"quantity\": 2\n    }\n  ]\n}\n\n ```"
					},
					"response": [
						{
							"name": "4.5 getWishlistAfterDelete",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/wishlists/{{wishlistID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"wishlists",
										"{{wishlistID}}"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "37"
								},
								{
									"key": "ETag",
									"value": "W/\"25-vKPJ6piY9SvfRkJ/XHxwKNESMOw\""
								},
								{
									"key": "Date",
									"value": "Mon, 05 May 2025 20:07:32 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Wishlist not found\"\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "title",
			"value": ""
		},
		{
			"key": "author",
			"value": ""
		},
		{
			"key": "isbn",
			"value": ""
		},
		{
			"key": "releaseDate",
			"value": ""
		},
		{
			"key": "createdAt",
			"value": ""
		},
		{
			"key": "updatedAt",
			"value": ""
		},
		{
			"key": "randomBookName",
			"value": ""
		},
		{
			"key": "randomAuthorName",
			"value": ""
		},
		{
			"key": "randomIBSN",
			"value": ""
		},
		{
			"key": "randomReleaseDate",
			"value": ""
		},
		{
			"key": "bookIdCreated",
			"value": ""
		},
		{
			"key": "updatedRandomBookName",
			"value": ""
		},
		{
			"key": "updatedRandomAuthorName",
			"value": ""
		},
		{
			"key": "updatedRandomIBSN",
			"value": ""
		},
		{
			"key": "updatedRandomReleaseDate",
			"value": ""
		},
		{
			"key": "updatedTitle",
			"value": ""
		},
		{
			"key": "updatedAutor",
			"value": ""
		},
		{
			"key": "updatedIsbn",
			"value": ""
		},
		{
			"key": "updatedReleaseDate",
			"value": ""
		},
		{
			"key": "updatedCreatedAt",
			"value": ""
		},
		{
			"key": "updatedUpdatedAt",
			"value": ""
		},
		{
			"key": "randomHouseHoldName",
			"value": ""
		},
		{
			"key": "houseHoldIdCreated",
			"value": ""
		},
		{
			"key": "houseHoldCreatedName",
			"value": ""
		},
		{
			"key": "updatedRandomHouseHoldName",
			"value": ""
		},
		{
			"key": "updatedHouseHoldIdCreated",
			"value": ""
		},
		{
			"key": "updatedHouseHoldCreatedName",
			"value": ""
		},
		{
			"key": "userFirstName",
			"value": ""
		},
		{
			"key": "userLastName",
			"value": ""
		},
		{
			"key": "userEmail",
			"value": ""
		},
		{
			"key": "userCreatedAt",
			"value": ""
		},
		{
			"key": "userUpdatedAt",
			"value": ""
		},
		{
			"key": "userIdCreated",
			"value": ""
		},
		{
			"key": "updatedUserFirstName",
			"value": ""
		},
		{
			"key": "updatedUserLastName",
			"value": ""
		},
		{
			"key": "updatedUserEmail",
			"value": ""
		},
		{
			"key": "updatedUserCreatedAt",
			"value": ""
		},
		{
			"key": "updatedUserUpdatedAt",
			"value": ""
		},
		{
			"key": "randomWishListName",
			"value": ""
		},
		{
			"key": "randomBooksArray",
			"value": ""
		},
		{
			"key": "wishlistName",
			"value": ""
		},
		{
			"key": "books",
			"value": ""
		},
		{
			"key": "wishlistCreatedAt",
			"value": ""
		},
		{
			"key": "wishlistUpdatedAt",
			"value": ""
		},
		{
			"key": "wishlistID",
			"value": ""
		},
		{
			"key": "wishlistBooks",
			"value": ""
		},
		{
			"key": "updatedWishlistName",
			"value": ""
		},
		{
			"key": "updatedWishlistBooks",
			"value": ""
		},
		{
			"key": "updatedWishlistCreatedAt",
			"value": ""
		},
		{
			"key": "updatedWishlistUpdatedAt",
			"value": ""
		},
		{
			"key": "updatedRandomWishListName",
			"value": ""
		},
		{
			"key": "updatedRandomBooksArray",
			"value": ""
		}
	]
}